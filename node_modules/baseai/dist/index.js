#!/usr/bin/env node
import Sl from"dotenv";import Ml from"path";import*as Wo from"@clack/prompts";import{cosmiconfig as Vs}from"cosmiconfig";import{TypeScriptLoader as zs}from"cosmiconfig-typescript-loader";var We={log:{isEnabled:!0,logSensitiveData:!1,pipe:!0,"pipe.completion":!0,"pipe.request":!0,"pipe.response":!0,tool:!0,memory:!0},memory:{useLocalEmbeddings:!1},envFilePath:".env"};async function oe(){let e=Vs("baseai",{searchPlaces:["baseai/baseai.config.ts"],loaders:{".ts":zs()}});try{let o=await e.search();o||(Wo.cancel("Failed to create config file"),process.exit(1));let t=o.config.config;if(t)return{...We,...t,log:{...We.log,...t.log}}}catch{Wo.cancel("Error: Unable to load config file"),process.exit(1)}return We}import Ae from"picocolors";function h({text:e,sub:o,dim:t,green:r}){return r?`${Ae.bgGreen(Ae.black(` ${e} `))} ${o&&o}`:t?`${Ae.bgBlack(Ae.white(` ${e} `))} ${o&&o}`:`${Ae.bold(Ae.bgCyan(Ae.black(` ${e} `)))} ${o&&o}`}import*as Lt from"@clack/prompts";import{cancel as Ot,confirm as Xs,isCancel as Dt,note as Ys,outro as $t,password as Ws}from"@clack/prompts";import Qs from"conf";import Zs from"fs";import ei from"open";import oi from"path";import Qe from"picocolors";var Ze=new Qs({projectName:"baseai"});async function Nt(){Lt.intro(h({text:"Langbase Authentication",sub:"Auth by logging in to Langbase and getting your API key"}));let e=await Xs({message:`Open the authentication page? ${Qe.dim("\u2014 copy your API key from there and paste it here.")}`});Dt(e)&&(Ot("Operation cancelled."),process.exit(0)),e&&(await ei("https://langbase.com/settings/api"),Ys(Qe.yellow("Please copy your API key from the opened page and paste it here.")));let o=await Ws({message:"Paste your API key string:",mask:"*"});Dt(o)&&(Ot("Operation cancelled."),process.exit(0));let[t,r]=o.split(":");(!t||!r)&&($t(Qe.red("Invalid API key string. It should be in the format login:apiKey, when copied from https://langbase.com/settings/api it should be in the correct format.")),process.exit(1));let n={login:t,apiKey:r},i=[...Ze.get("accounts")||[],n];Ze.set("accounts",i);let p=`
# Langbase API key for https://langbase.com/${t}
LANGBASE_API_KEY=${r}

`,m=(await oe()).envFilePath||".env";Zs.appendFileSync(oi.join(process.cwd(),m),p),$t(Qe.green(`Authentication successful. Credentials stored in config and ${m}`)),console.log(Qe.dim(`Config file location: ${Ze.path}`)),process.exit(0)}function bo(){let e=Ze.get("accounts")||[],o=Ze.get("currentAccount");return o?e.find(t=>t.login===o):e[0]}import ti from"figures";import y from"picocolors";var Kl={info:y.cyan,success:y.green,warning:y.yellow,error:y.red,green:y.green,red:y.red,yellow:y.yellow,cyan:y.cyan,blue:y.blue,magenta:y.magenta,white:y.white,gray:y.gray,dim:y.dim,bold:y.bold},te=e=>y.italic(y.dim(e)),be=y.dim,Vl=y.bold,zl=y.underline,Xl=y.italic,Yl=y.inverse,Wl=y.hidden,Ql=y.strikethrough,Zl=y.reset,em=y.black,om=y.red,xo=y.green,tm=y.yellow,rm=y.blue,nm=y.magenta,z=y.cyan,sm=y.white,im=y.gray;var Ft=y.dim(`${ti.lineUpDownRight} `);import jt from"fs";import ri from"path";async function Gt(){let e=ri.join(process.cwd(),"baseai","pipes");return jt.existsSync(e)?(await jt.promises.readdir(e)).map(r=>r.replace(".ts","")):[]}import Bt from"fs";import ni from"path";async function Ne(){let e=ni.join(process.cwd(),"baseai","tools");return Bt.existsSync(e)?(await Bt.promises.readdir(e)).map(r=>r.replace(".ts","")):[]}import Qo from"figures";var si={pipe:Qo.lineDownDoubleRightDouble,tool:Qo.lineDownLeftBoldRightBold,memory:Qo.nodejs},ve=si;import qt from"@sindresorhus/slugify";function wo({name:e,allTools:o}){return o.some(t=>qt(t)===qt(e))}import*as Ht from"prettier";async function xe(e){return await Ht.format(e,{parser:"typescript",singleQuote:!0,trailingComma:"none",arrowParens:"avoid",printWidth:80,useTabs:!0,semi:!0,tabWidth:4})}import*as w from"@clack/prompts";import Zo from"@sindresorhus/slugify";import et from"camelcase";import ii from"figures";import Po from"fs";import ai from"p-map";import vo from"path";import Eo from"picocolors";function pi(e){if(!e)return{login:"",name:""};let o=e.split("/"),t=o.length;return t<2?{login:"",name:""}:{login:o[t-2],name:o[t-1]}}async function li(){try{let e=await bo();return e||null}catch(e){return w.log.error(`Error retrieving stored auth: ${e.message}`),null}}async function mi({login:e,name:o,spinner:t}){var r;t.start("Fetching pipe from Langbase");try{let n=await li(),s=`https://api.langbase.com/v1/pipes/${e}/${o}`,i=await fetch(s,{method:"GET",headers:{"Content-Type":"application/json",...n&&{Authorization:`Bearer ${n.apiKey}`}}});if(i.ok)return t.stop("Fetched pipe from Langbase"),await i.json();let a=await i.json();a&&(t.stop(`Failed to fetch pipe from Langbase: ${(r=a.error)==null?void 0:r.message}`),process.exit(1))}catch(n){return t.stop(n),null}}async function ci(e){if(!e.tools.length)return;let o=await Ne();try{await ai(e.tools,async t=>{if(wo({name:t.function.name,allTools:o})&&!(await w.group({overwrite:()=>w.confirm({message:`${Eo.dim(ve.tool)} Tool: ${Eo.cyan(t.function.name)} already exists. Do you want to overwrite it?`,initialValue:!1})},{onCancel:()=>{w.cancel("Operation cancelled."),process.exit(0)}})).overwrite){w.outro("Skipped \u2026");return}let n=t.function.name,s=et(n),i=Zo(n),a=`import { ToolI } from '@baseai/core';

			export async function ${n}() {
				// Your tool logic here
			}

			const ${s}Tool = (): ToolI => ({
				run: ${n}, // Name of the function to run
				type: 'function' as const,
				function: {
					name: \`${n}\`,
					description: \`${t.function.description}\`,
					parameters: ${JSON.stringify(t.function.parameters||{},null,6)}
				}
			});

			export default ${s}Tool;`,p=await xe(a),l=vo.join(process.cwd(),"baseai","tools"),m=vo.join(l,`${i}.ts`);await Po.promises.mkdir(l,{recursive:!0}),await Po.promises.writeFile(m,p),w.outro(`Tool created successfully at ${m}`)},{concurrency:1})}catch(t){w.cancel(`Error creating tool: ${t.message}`)}}function di(e){return e.map(o=>{let t=Zo(o.function.name),r=`${et(o.function.name)}Tool`,n=`import ${r} from '../tools/${t}';`;return{toolCall:`${r}()`,importPath:n,toolFileName:t}})}async function ui(e){try{let o=await Gt(),t=Zo(e.name);if(o.some(d=>d===t)&&!(await w.group({overwrite:()=>w.confirm({message:`PIPE: ${Eo.cyan(e.name)} already exists. Do you want to overwrite it?`,initialValue:!1})},{onCancel:()=>{w.cancel("Operation cancelled."),process.exit(0)}})).overwrite){w.outro("Skipped \u2026");return}let n=await di(e.tools),s=n.map(d=>d.toolCall),i=et("pipe-"+e.name),a=e.messages.map(d=>({...d.name&&{name:d.name},role:d.role,content:d.content})),p=`import { PipeI } from '@baseai/core';
${n.map(d=>d.importPath).join(`
`)}

		const ${i} = (): PipeI => ({
			// Replace with your API key https://langbase.com/docs/api-reference/api-keys
			apiKey: process.env.LANGBASE_API_KEY!,
			name: \`${e.name}\`,
			description: \`${e.description}\`,
			status: \`${e.status}\`,
			model: \`${e.model}\`,
			stream: ${e.stream},
			json: ${e.json},
			store: ${e.store},
			moderate: ${e.moderate||!0},
			top_p: ${e.top_p},
			max_tokens: ${e.max_tokens},
			temperature: ${e.temperature},
			presence_penalty: ${e.presence_penalty},
			frequency_penalty: ${e.frequency_penalty},
			stop: ${JSON.stringify(e.stop)},
			tool_choice: ${JSON.stringify(e.tool_choice)},
			parallel_tool_calls: ${e.parallel_tool_calls},
			messages: ${JSON.stringify(a||[])},
			variables: ${JSON.stringify(e.variables)},
			tools: [${s}],
			memory: [],
		});

		export default ${i};`,l=await xe(p),m=vo.join(process.cwd(),"baseai","pipes"),c=vo.join(m,`${t}.ts`);await Po.promises.mkdir(m,{recursive:!0}),await Po.promises.writeFile(c,l),w.outro(`Pipe created successfully at ${c}`),w.outro(h({text:t,sub:`pipe added 
 ${be(ii.pointer)} ${te(` ${c}`)}`,green:!0})),process.exit(0)}catch(o){w.cancel(`Error creating pipe: ${o.message}`)}}async function Ut({loginAndPipe:e}){w.intro(h({text:"PIPE",sub:`Adding ${Eo.cyan(e)}`}));let{login:o,name:t}=pi(e);if(!o||!t){w.log.error("Invalid pipe information provided");return}let r=w.spinner();try{let n=await mi({login:o,name:t,spinner:r});if(!n)return;await ci(n),await ui(n)}catch(n){r.stop("An unexpected error occurred"),w.log.error(`'An unexpected error occurred': ${n.message}`)}}import*as $ from"@clack/prompts";import{exec as fi}from"child_process";import re from"fs/promises";import D from"path";import{promisify as gi}from"util";var Jt=gi(fi);async function hi({calledAsCommand:e}){try{e&&$.intro(h({text:"BUILDING",sub:"baseai..."})),await yi(),await Ci(),await eo(),console.log(""),$.outro(h({text:"BUILD",sub:"complete",green:!0}))}catch(o){throw $.log.error("Build failed"),o}}var So=hi,yi=async()=>{console.log(""),$.intro(h({text:"PIPES",sub:"",dim:!0}));let e=D.join(process.cwd(),"baseai","pipes"),o=D.join(process.cwd(),".baseai","pipes"),t=await Kt(e,o,"pipes");ot("Pipes",t,ve.pipe)},Ci=async()=>{console.log(""),$.intro(h({text:"TOOLS",sub:"",dim:!0}));let e=D.join(process.cwd(),"baseai","tools"),o=D.join(process.cwd(),".baseai","tools"),t=await Kt(e,o,"tools");ot("Tools",t,ve.tool)},eo=async({memoryName:e}={})=>{console.log(""),$.intro(h({text:"MEMORY",sub:"",dim:!0}));let o=D.join(process.cwd(),"baseai","memory"),t=D.join(process.cwd(),".baseai","memory");try{await re.access(o)}catch{$.log.info("No memory directory found. Skipping memory build.");return}try{await re.access(t)}catch{await re.mkdir(t,{recursive:!0})}let r=[],n=$.spinner(),s=[];if(e&&(s=await bi({sourcePath:o,memoryName:e})),!e&&(s=await xi(o),s.length===0)){$.log.info("MEMORY: No index.ts file found. Skipping memory build.");return}n.start("Building memory");for(let i of s){let a=D.join(o,i),p=D.join(t,`${D.dirname(i)}.json`),l=D.dirname(i);try{let{stdout:m}=await Jt(`npx tsx -e "import memoryConfig from '${JSON.stringify(a)}'; console.log(JSON.stringify(memoryConfig()))"`);await re.writeFile(p,m),n.message(`Compiled ${l}`),r.push(l)}catch(m){n.stop(`Error compiling ${l}: ${m}`)}}n.stop("Build complete"),ot("Memories",r,ve.memory)},Kt=async(e,o,t)=>{try{await re.access(e)}catch{return $.log.info(`No ${t} directory found. Skipping ${t} build.`),[]}await re.mkdir(o,{recursive:!0});let n=(await re.readdir(e)).filter(a=>a.endsWith(".ts"));if(n.length===0)return $.log.info(`No .ts files found in the ${t} directory. Skipping ${t} build.`),[];let s=$.spinner();s.start(`Building ${t}`);let i=[];for(let a of n){let p=D.join(e,a),l=D.join(o,a.replace(".ts",".json")),m=D.parse(a).name;try{let{stdout:c}=await Jt(`npx tsx -e "import config from '${JSON.stringify(p)}'; console.log(JSON.stringify(config()))"`),d=JSON.parse(c);"apiKey"in d&&delete d.apiKey;let f=JSON.stringify(d,null,2);await re.writeFile(l,f),s.message(`Compiled ${m}`),i.push(m)}catch(c){s.stop(`Error compiling ${m}: ${c}`)}}return s.stop("Build complete"),i},ot=(e,o,t)=>{o.length>0&&o.forEach(r=>{console.log(`${t}  ${r}`)})};async function bi({sourcePath:e,memoryName:o}){let t=[],r=D.join(e,o),s=(await re.readdir(r)).find(i=>i==="index.ts");return s||($.log.info("MEMORY: No index.ts file found. Skipping memory build."),process.exit(1)),t.push(D.join(o,s)),t}async function xi(e){let o=[],r=(await re.readdir(e)).map(async i=>{let a=D.join(e,i);return(await re.stat(a)).isDirectory()?i:""}),n=await Promise.all(r);if(n=n.filter(i=>i!==""),n.length===0)return $.log.info("MEMORY: No memory found. Skipping memory build."),[];let s=n.map(async i=>{let a=D.join(e,i),l=(await re.readdir(a)).find(m=>m==="index.ts");return l?D.join(i,l):""});return o=await Promise.all(s),o=o.filter(i=>i!==""),o}var S="OpenAI",G="Anthropic",T="Together",M="Google",j="Groq",L="Cohere",v="Fireworks AI",I="Perplexity",pe="Mistral AI",Vt="deepinfra",zt="bedrock",Xt="azure-openai",U="ollama",Fe="xAI",qm={[S]:[{id:"gpt-4o",provider:S,promptCost:5,completionCost:15,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4o-2024-08-06",provider:S,promptCost:2.5,completionCost:10,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4o-mini",provider:S,promptCost:.15,completionCost:.6,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4-turbo",provider:S,promptCost:10,completionCost:30,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4-turbo-preview",provider:S,promptCost:10,completionCost:30,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4-0125-preview",provider:S,promptCost:10,completionCost:30,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4-1106-preview",provider:S,promptCost:10,completionCost:30,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4",provider:S,promptCost:30,completionCost:60,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4-0613",provider:S,promptCost:30,completionCost:60,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4-32k",provider:S,promptCost:60,completionCost:120,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-3.5-turbo",provider:S,promptCost:.5,completionCost:1.5,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-3.5-turbo-0125",provider:S,promptCost:.5,completionCost:1.5,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-3.5-turbo-1106",provider:S,promptCost:1,completionCost:2,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-3.5-turbo-16k",provider:S,promptCost:3,completionCost:4,toolSupport:{toolChoice:!0,parallelToolCalls:!0}}],[T]:[{id:"meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo",provider:T,promptCost:5,completionCost:5,toolSupport:{toolChoice:!0,parallelToolCalls:!1}},{id:"meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo",provider:T,promptCost:.88,completionCost:.88,toolSupport:{toolChoice:!0,parallelToolCalls:!1}},{id:"meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",provider:T,promptCost:.18,completionCost:.18,toolSupport:{toolChoice:!0,parallelToolCalls:!1}},{id:"meta-llama/Llama-3-70b-chat-hf",provider:T,promptCost:.9,completionCost:.9},{id:"meta-llama/Llama-3-8b-chat-hf",provider:T,promptCost:.2,completionCost:.2},{id:"togethercomputer/Llama-2-7B-32K-Instruct",provider:T,promptCost:.2,completionCost:.2},{id:"meta-llama/Llama-2-13b-chat-hf",provider:T,promptCost:.225,completionCost:.225},{id:"meta-llama/Llama-2-70b-chat-hf",provider:T,promptCost:.9,completionCost:.9},{id:"google/gemma-7b-it",provider:T,promptCost:.2,completionCost:.2},{id:"google/gemma-2b-it",provider:T,promptCost:.1,completionCost:.1},{id:"mistralai/Mistral-7B-Instruct-v0.1",provider:T,promptCost:.2,completionCost:.2,toolSupport:{toolChoice:!0,parallelToolCalls:!1}},{id:"mistralai/Mistral-7B-Instruct-v0.2",provider:T,promptCost:.2,completionCost:.2},{id:"mistralai/Mixtral-8x7B-Instruct-v0.1",provider:T,promptCost:.6,completionCost:.6,toolSupport:{toolChoice:!0,parallelToolCalls:!1}},{id:"mistralai/Mixtral-8x22B-Instruct-v0.1",provider:T,promptCost:1.2,completionCost:1.2},{id:"databricks/dbrx-instruct",provider:T,promptCost:1.2,completionCost:1.2}],[G]:[{id:"claude-3-5-sonnet-latest",provider:G,promptCost:3,completionCost:15,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"claude-3-5-sonnet-20240620",provider:G,promptCost:3,completionCost:15,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"claude-3-opus-20240229",provider:G,promptCost:15,completionCost:75,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"claude-3-sonnet-20240229",provider:G,promptCost:3,completionCost:15,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"claude-3-haiku-20240307",provider:G,promptCost:.25,completionCost:1.25,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"claude-3-5-haiku-20241022",provider:G,promptCost:1,completionCost:5,toolSupport:{toolChoice:!0,parallelToolCalls:!0}}],[j]:[{id:"llama-3.1-70b-versatile",provider:j,promptCost:.59,completionCost:.79},{id:"llama-3.1-8b-instant",provider:j,promptCost:.59,completionCost:.79},{id:"llama3-70b-8192",provider:j,promptCost:.59,completionCost:.79},{id:"llama3-8b-8192",provider:j,promptCost:.05,completionCost:.1},{id:"mixtral-8x7b-32768",provider:j,promptCost:.27,completionCost:.27},{id:"gemma2-9b-it",provider:j,promptCost:.2,completionCost:.2},{id:"gemma-7b-it",provider:j,promptCost:.07,completionCost:.07}],[M]:[{id:"gemini-1.5-pro-latest",provider:M,promptCost:3.5,completionCost:10.5,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gemini-1.5-flash-latest",provider:M,promptCost:.075,completionCost:.3,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gemini-1.5-flash-8b-latest",provider:M,promptCost:.0375,completionCost:.15,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gemini-pro",provider:M,promptCost:.5,completionCost:1.5,toolSupport:{toolChoice:!1,parallelToolCalls:!1}}],[L]:[{id:"command-r",provider:L,promptCost:.5,completionCost:1.5},{id:"command-r-plus",provider:L,promptCost:3,completionCost:15}],[v]:[{id:"llama-v3p1-405b-instruct",provider:v,promptCost:3,completionCost:3},{id:"llama-v3p1-70b-instruct",provider:v,promptCost:.9,completionCost:.9},{id:"llama-v3p1-8b-instruct",provider:v,promptCost:.2,completionCost:.2},{id:"yi-large",provider:v,promptCost:3,completionCost:3},{id:"llama-v3-70b-instruct",provider:v,promptCost:.9,completionCost:.9}],[I]:[{id:"llama-3.1-sonar-huge-128k-online",provider:I,promptCost:5,completionCost:5,requestCost:.005},{id:"llama-3.1-sonar-large-128k-online",provider:I,promptCost:1,completionCost:1,requestCost:.005},{id:"llama-3.1-sonar-small-128k-online",provider:I,promptCost:.2,completionCost:.2,requestCost:.005},{id:"llama-3.1-sonar-large-128k-chat",provider:I,promptCost:1,completionCost:1},{id:"llama-3.1-sonar-small-128k-chat",provider:I,promptCost:.2,completionCost:.2}],[pe]:[{id:"mistral-large-latest",provider:pe,promptCost:3,completionCost:9},{id:"open-mistral-nemo",provider:pe,promptCost:.3,completionCost:.3},{id:"codestral-latest",provider:pe,promptCost:1,completionCost:3}],[Fe]:[{id:"grok-beta",provider:Fe,promptCost:5,completionCost:15}]},Yt=["gpt-4o","gpt-4o-mini-2024-07-18-free","gpt-4o-2024-08-06","gpt-4o-mini","gpt-4-turbo","gpt-4-turbo-preview","gpt-4-0125-preview","gpt-3.5-turbo","gpt-3.5-turbo-0125","gpt-3.5-turbo-1106","gpt-4-1106-preview","mistralai/Mistral-7B-Instruct-v0.1","mistralai/Mixtral-8x7B-Instruct-v0.1","gemini-1.5-pro-latest","gemini-1.5-flash-latest"];import Te from"chalk";import wi from"util";var Pi=!1,vi=!1,Ei=["sensitive","secret","hide","private","password","token","key","auth","authorization","redact"],Si=e=>typeof e=="object"&&e!==null?wi.inspect(e,{colors:!0,depth:null}):typeof e=="string"?Te.green(`"${e}"`):typeof e=="number"?Te.yellow(e.toString()):typeof e=="boolean"?Te.cyan(e.toString()):String(e),Mi=e=>Ei.some(o=>e.toLowerCase().includes(o)),Ai=(e,o)=>o&&!vi?Te.red("======REDACTED======"):Si(e),Wt=(e,o,t)=>{let r=Ai(o,!!t&&Mi(t||e));console.log(`
${Te.blue("======")} \u{1F440} ${Te.bold(e)} \u{1F440} ${Te.blue("======")}`),console.log(r)},u=(e,o,t)=>{Pi&&(typeof e=="object"&&e!==null&&o===void 0?Object.entries(e).forEach(([r,n])=>Wt(r,n,t||r)):Wt(String(e),o,t))};function Mo({localDocs:e,prodDocs:o}){let t=new Set(e),r=new Set(o),n=t.size===r.size&&e.every(l=>r.has(l)),s=o.every(l=>t.has(l)),i=e.every(l=>r.has(l)),a=!e.some(l=>r.has(l))&&!o.some(l=>t.has(l)),p=e.some(l=>r.has(l));return{areListsSame:n,isProdSubsetOfLocal:s,isProdSupersetOfLocal:i,areMutuallyExclusive:a,areOverlapping:p}}var Qt=[".md",".txt",".pdf",".csv",".xlsx",".xls"],Ti={".json":"JSON",".yaml":"YAML",".yml":"YAML",".xml":"XML",".html":"HTML",".htm":"HTML",".abap":"ABAP",".asc":"AGS Script",".ash":"AGS Script",".ampl":"AMPL",".mod":"Modula-2",".g4":"ANTLR",".apl":"APL",".dyalog":"APL",".asp":"ASP",".asax":"ASP",".ascx":"ASP",".ashx":"ASP",".asmx":"ASP",".aspx":"ASP",".axd":"ASP",".dats":"ATS",".hats":"ATS",".sats":"ATS",".as":"ActionScript",".adb":"Ada",".ada":"Ada",".ads":"Ada",".agda":"Agda",".als":"Alloy",".cls":"Visual Basic",".applescript":"AppleScript",".scpt":"AppleScript",".arc":"Arc",".ino":"Arduino",".aj":"AspectJ",".asm":"Assembly",".a51":"Assembly",".inc":"SourcePawn",".nasm":"Assembly",".aug":"Augeas",".ahk":"AutoHotkey",".ahkl":"AutoHotkey",".au3":"AutoIt",".awk":"Awk",".auk":"Awk",".gawk":"Awk",".mawk":"Awk",".nawk":"Awk",".bat":"Batchfile",".cmd":"Batchfile",".befunge":"Befunge",".bison":"Bison",".bb":"BlitzBasic",".decls":"BlitzBasic",".bmx":"BlitzMax",".bsv":"Bluespec",".boo":"Boo",".b":"Limbo",".bf":"HyPhy",".brs":"Brightscript",".bro":"Bro",".c":"C",".cats":"C",".h":"Objective-C",".idc":"C",".w":"C",".cs":"Smalltalk",".cake":"CoffeeScript",".cshtml":"C#",".csx":"C#",".cpp":"C++",".c++":"C++",".cc":"C++",".cp":"Component Pascal",".cxx":"C++",".h++":"C++",".hh":"Hack",".hpp":"C++",".hxx":"C++",".inl":"C++",".ipp":"C++",".tcc":"C++",".tpp":"C++",".chs":"C2hs Haskell",".clp":"CLIPS",".cmake":"CMake",".cmake.in":"CMake",".cob":"COBOL",".cbl":"COBOL",".ccp":"COBOL",".cobol":"COBOL",".cpy":"COBOL",".capnp":"Cap'n Proto",".mss":"CartoCSS",".ceylon":"Ceylon",".chpl":"Chapel",".ch":"xBase",".ck":"ChucK",".cirru":"Cirru",".clw":"Clarion",".icl":"Clean",".dcl":"Clean",".click":"Click",".clj":"Clojure",".boot":"Clojure",".cl2":"Clojure",".cljc":"Clojure",".cljs":"Clojure",".cljs.hl":"Clojure",".cljscm":"Clojure",".cljx":"Clojure",".hic":"Clojure",".coffee":"CoffeeScript","._coffee":"CoffeeScript",".cjsx":"CoffeeScript",".cson":"CoffeeScript",".iced":"CoffeeScript",".cfm":"ColdFusion",".cfml":"ColdFusion",".cfc":"ColdFusion CFC",".lisp":"NewLisp",".asd":"Common Lisp",".cl":"OpenCL",".l":"PicoLisp",".lsp":"NewLisp",".ny":"Common Lisp",".podsl":"Common Lisp",".sexp":"Common Lisp",".cps":"Component Pascal",".coq":"Coq",".v":"Verilog",".cr":"Crystal",".feature":"Cucumber",".cu":"Cuda",".cuh":"Cuda",".cy":"Cycript",".pyx":"Cython",".pxd":"Cython",".pxi":"Cython",".d":"Makefile",".di":"D",".com":"DIGITAL Command Language",".dm":"DM",".dart":"Dart",".djs":"Dogescript",".dylan":"Dylan",".dyl":"Dylan",".intr":"Dylan",".lid":"Dylan",".E":"E",".ecl":"ECLiPSe",".eclxml":"ECL",".e":"Eiffel",".ex":"Elixir",".exs":"Elixir",".elm":"Elm",".el":"Emacs Lisp",".emacs":"Emacs Lisp",".emacs.desktop":"Emacs Lisp",".em":"EmberScript",".emberscript":"EmberScript",".erl":"Erlang",".es":"JavaScript",".escript":"Erlang",".hrl":"Erlang",".xrl":"Erlang",".yrl":"Erlang",".fs":"GLSL",".fsi":"F#",".fsx":"F#",".fx":"HLSL",".flux":"FLUX",".f90":"FORTRAN",".f":"Forth",".f03":"FORTRAN",".f08":"FORTRAN",".f77":"FORTRAN",".f95":"FORTRAN",".for":"Forth",".fpp":"FORTRAN",".factor":"Factor",".fy":"Fancy",".fancypack":"Fancy",".fan":"Fantom",".fth":"Forth",".4th":"Forth",".forth":"Forth",".fr":"Frege",".frt":"Forth",".ftl":"FreeMarker",".gms":"GAMS",".g":"GAP",".gap":"GAP",".gd":"GDScript",".gi":"GAP",".tst":"Scilab",".s":"GAS",".ms":"MAXScript",".glsl":"GLSL",".fp":"GLSL",".frag":"JavaScript",".frg":"GLSL",".fsh":"GLSL",".fshader":"GLSL",".geo":"GLSL",".geom":"GLSL",".glslv":"GLSL",".gshader":"GLSL",".shader":"GLSL",".vert":"GLSL",".vrx":"GLSL",".vsh":"GLSL",".vshader":"GLSL",".gml":"Game Maker Language",".kid":"Genshi",".ebuild":"Gentoo Ebuild",".eclass":"Gentoo Eclass",".glf":"Glyph",".gp":"Gnuplot",".gnu":"Gnuplot",".gnuplot":"Gnuplot",".plot":"Gnuplot",".plt":"Gnuplot",".go":"Go",".golo":"Golo",".gs":"JavaScript",".gst":"Gosu",".gsx":"Gosu",".vark":"Gosu",".grace":"Grace",".gf":"Grammatical Framework",".groovy":"Groovy",".grt":"Groovy",".gtpl":"Groovy",".gvy":"Groovy",".gsp":"Groovy Server Pages",".hcl":"HCL",".tf":"HCL",".hlsl":"HLSL",".fxh":"HLSL",".hlsli":"HLSL",".php":"PHP",".hb":"Harbour",".hs":"Haskell",".hsc":"Haskell",".hx":"Haxe",".hxsl":"Haxe",".hy":"Hy",".pro":"QMake",".dlm":"IDL",".ipf":"IGOR Pro",".idr":"Idris",".lidr":"Idris",".ni":"Inform 7",".i7x":"Inform 7",".iss":"Inno Setup",".io":"Io",".ik":"Ioke",".thy":"Isabelle",".ijs":"J",".flex":"JFlex",".jflex":"JFlex",".jq":"JSONiq",".jsx":"JSX",".mdx":"MDX",".j":"Objective-J",".java":"Java",".jsp":"Java Server Pages",".js":"JavaScript","._js":"JavaScript",".bones":"JavaScript",".es6":"JavaScript",".jake":"JavaScript",".jsb":"JavaScript",".jscad":"JavaScript",".jsfl":"JavaScript",".jsm":"JavaScript",".jss":"JavaScript",".njs":"JavaScript",".pac":"JavaScript",".sjs":"JavaScript",".ssjs":"JavaScript",".sublime-build":"JavaScript",".sublime-commands":"JavaScript",".sublime-completions":"JavaScript",".sublime-keymap":"JavaScript",".sublime-macro":"JavaScript",".sublime-menu":"JavaScript",".sublime-mousemap":"JavaScript",".sublime-project":"JavaScript",".sublime-settings":"JavaScript",".sublime-theme":"JavaScript",".sublime-workspace":"JavaScript",".sublime_metrics":"JavaScript",".sublime_session":"JavaScript",".xsjs":"JavaScript",".xsjslib":"JavaScript",".jl":"Julia",".krl":"KRL",".sch":"KiCad",".brd":"KiCad",".kicad_pcb":"KiCad",".kt":"Kotlin",".ktm":"Kotlin",".kts":"Kotlin",".lfe":"LFE",".ll":"LLVM",".lol":"LOLCODE",".lsl":"LSL",".lslp":"LSL",".lvproj":"LabVIEW",".lasso":"Lasso",".las":"Lasso",".lasso8":"Lasso",".lasso9":"Lasso",".ldml":"Lasso",".lean":"Lean",".hlean":"Lean",".lex":"Lex",".ly":"LilyPond",".ily":"LilyPond",".m":"Objective-C",".lagda":"Literate Agda",".litcoffee":"Literate CoffeeScript",".lhs":"Literate Haskell",".ls":"LoomScript","._ls":"LiveScript",".xm":"Logos",".x":"Logos",".xi":"Logos",".lgt":"Logtalk",".logtalk":"Logtalk",".lookml":"LookML",".lua":"Lua",".fcgi":"Shell",".nse":"Lua",".pd_lua":"Lua",".rbxs":"Lua",".wlua":"Lua",".mumps":"M",".m4":"M4Sugar",".mcr":"MAXScript",".muf":"MUF",".mak":"Makefile",".mk":"Makefile",".mkfile":"Makefile",".mako":"Mako",".mao":"Mako",".mathematica":"Mathematica",".cdf":"Mathematica",".ma":"Mathematica",".mt":"Mathematica",".nb":"Mathematica",".nbp":"Mathematica",".wl":"Mathematica",".wlt":"Mathematica",".matlab":"Matlab",".maxpat":"Max",".maxhelp":"Max",".maxproj":"Max",".mxt":"Max",".pat":"Max",".moo":"Moocode",".metal":"Metal",".minid":"MiniD",".druby":"Mirah",".duby":"Mirah",".mir":"Mirah",".mirah":"Mirah",".mo":"Modelica",".mms":"Module Management System",".mmk":"Module Management System",".monkey":"Monkey",".moon":"MoonScript",".myt":"Myghty",".ncl":"NCL",".nsi":"NSIS",".nsh":"NSIS",".n":"Nemerle",".axs":"NetLinx",".axi":"NetLinx",".axs.erb":"NetLinx+ERB",".axi.erb":"NetLinx+ERB",".nlogo":"NetLogo",".nl":"NewLisp",".nim":"Nimrod",".nimrod":"Nimrod",".nit":"Nit",".nix":"Nix",".nu":"Nu",".numpy":"NumPy",".numpyw":"NumPy",".numsc":"NumPy",".ml":"OCaml",".eliom":"OCaml",".eliomi":"OCaml",".ml4":"OCaml",".mli":"OCaml",".mll":"OCaml",".mly":"OCaml",".mm":"Objective-C++",".sj":"Objective-J",".omgrofl":"Omgrofl",".opa":"Opa",".opal":"Opal",".opencl":"OpenCL",".p":"OpenEdge ABL",".scad":"OpenSCAD",".ox":"Ox",".oxh":"Ox",".oxo":"Ox",".oxygene":"Oxygene",".oz":"Oz",".pwn":"PAWN",".aw":"PHP",".ctp":"PHP",".php3":"PHP",".php4":"PHP",".php5":"PHP",".phps":"PHP",".phpt":"PHP",".pls":"PLSQL",".pck":"PLSQL",".pkb":"PLSQL",".pks":"PLSQL",".plb":"PLSQL",".plsql":"PLSQL",".sql":"SQLPL",".pov":"POV-Ray SDL",".pan":"Pan",".psc":"Papyrus",".parrot":"Parrot",".pasm":"Parrot Assembly",".pir":"Parrot Internal Representation",".pas":"Pascal",".dfm":"Pascal",".dpr":"Pascal",".lpr":"Pascal",".pp":"Puppet",".pl":"Prolog",".al":"Perl",".cgi":"Shell",".perl":"Perl",".ph":"Perl",".plx":"Perl",".pm":"Perl6",".pod":"Perl",".psgi":"Perl",".t":"Turing",".6pl":"Perl6",".6pm":"Perl6",".nqp":"Perl6",".p6":"Perl6",".p6l":"Perl6",".p6m":"Perl6",".pl6":"Perl6",".pm6":"Perl6",".pig":"PigLatin",".pike":"Pike",".pmod":"Pike",".pogo":"PogoScript",".pony":"Pony",".ps1":"PowerShell",".psd1":"PowerShell",".psm1":"PowerShell",".pde":"Processing",".prolog":"Prolog",".yap":"Prolog",".spin":"Propeller Spin",".pd":"Pure Data",".pb":"PureBasic",".pbi":"PureBasic",".purs":"PureScript",".py":"Python",".bzl":"Python",".gyp":"Python",".lmi":"Python",".pyde":"Python",".pyp":"Python",".pyt":"Python",".pyw":"Python",".rpy":"Ren'Py",".tac":"Python",".wsgi":"Python",".xpy":"Python",".qml":"QML",".qbs":"QML",".pri":"QMake",".r":"Rebol",".rd":"R",".rsx":"R",".rbbas":"REALbasic",".rbfrm":"REALbasic",".rbmnu":"REALbasic",".rbres":"REALbasic",".rbtbar":"REALbasic",".rbuistate":"REALbasic",".rkt":"Racket",".rktd":"Racket",".rktl":"Racket",".scrbl":"Racket",".rl":"Ragel in Ruby Host",".reb":"Rebol",".r2":"Rebol",".r3":"Rebol",".rebol":"Rebol",".red":"Red",".reds":"Red",".cw":"Redcode",".rs":"Rust",".rsh":"RenderScript",".robot":"RobotFramework",".rg":"Rouge",".rb":"Ruby",".builder":"Ruby",".gemspec":"Ruby",".god":"Ruby",".irbrc":"Ruby",".jbuilder":"Ruby",".mspec":"Ruby",".pluginspec":"Ruby",".podspec":"Ruby",".rabl":"Ruby",".rake":"Ruby",".rbuild":"Ruby",".rbw":"Ruby",".rbx":"Ruby",".ru":"Ruby",".ruby":"Ruby",".thor":"Ruby",".watchr":"Ruby",".rs.in":"Rust",".sas":"SAS",".smt2":"SMT",".smt":"SMT",".sqf":"SQF",".hqf":"SQF",".db2":"SQLPL",".sage":"Sage",".sagews":"Sage",".sls":"Scheme",".scala":"Scala",".sbt":"Scala",".sc":"SuperCollider",".scm":"Scheme",".sld":"Scheme",".sps":"Scheme",".ss":"Scheme",".sci":"Scilab",".sce":"Scilab",".self":"Self",".sh":"Shell",".bash":"Shell",".bats":"Shell",".command":"Shell",".ksh":"Shell",".sh.in":"Shell",".tmux":"Shell",".tool":"Shell",".zsh":"Shell",".sh-session":"ShellSession",".shen":"Shen",".sl":"Slash",".smali":"Smali",".st":"Smalltalk",".tpl":"Smarty",".sp":"SourcePawn",".sma":"SourcePawn",".nut":"Squirrel",".stan":"Stan",".ML":"Standard ML",".fun":"Standard ML",".sig":"Standard ML",".sml":"Standard ML",".do":"Stata",".ado":"Stata",".doh":"Stata",".ihlp":"Stata",".mata":"Stata",".matah":"Stata",".sthlp":"Stata",".scd":"SuperCollider",".swift":"Swift",".sv":"SystemVerilog",".svh":"SystemVerilog",".vh":"SystemVerilog",".txl":"TXL",".tcl":"Tcl",".adp":"Tcl",".tm":"Tcl",".tcsh":"Tcsh",".csh":"Tcsh",".thrift":"Thrift",".tu":"Turing",".ts":"TypeScript",".tsx":"TypeScript",".upc":"Unified Parallel C",".uno":"Uno",".uc":"UnrealScript",".ur":"UrWeb",".urs":"UrWeb",".vcl":"VCL",".vhdl":"VHDL",".vhd":"VHDL",".vhf":"VHDL",".vhi":"VHDL",".vho":"VHDL",".vhs":"VHDL",".vht":"VHDL",".vhw":"VHDL",".vala":"Vala",".vapi":"Vala",".veo":"Verilog",".vim":"VimL",".vb":"Visual Basic",".bas":"Visual Basic",".frm":"Visual Basic",".frx":"Visual Basic",".vba":"Visual Basic",".vbhtml":"Visual Basic",".vbs":"Visual Basic",".volt":"Volt",".webidl":"WebIDL",".x10":"X10",".xc":"XC",".xsp-config":"XPages",".xsp.metadata":"XPages",".xpl":"XProc",".xproc":"XProc",".xquery":"XQuery",".xq":"XQuery",".xql":"XQuery",".xqm":"XQuery",".xqy":"XQuery",".xs":"XS",".xslt":"XSLT",".xsl":"XSLT",".xojo_code":"Xojo",".xojo_menu":"Xojo",".xojo_report":"Xojo",".xojo_script":"Xojo",".xojo_toolbar":"Xojo",".xojo_window":"Xojo",".xtend":"Xtend",".y":"Yacc",".yacc":"Yacc",".yy":"Yacc",".zep":"Zephir",".zimpl":"Zimpl",".zmpl":"Zimpl",".zpl":"Zimpl",".ec":"eC",".eh":"eC",".fish":"fish",".mu":"mupad",".nc":"nesC",".ooc":"ooc",".wisp":"wisp",".prg":"xBase",".prw":"xBase"},oo=[...Qt,...Object.keys(Ti)],x={MAX_DOC_SIZE:10*1024*1024,ACCEPTED_MIME_TYPES:["text/plain","application/pdf","text/markdown","text/csv","application/vnd.ms-excel","application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],DOC_TYPES:Qt,EMBEDDING_MODEL:"text-embedding-3-large",EMBEDDING_DIMENSIONS:256,MIN_CHUNK_LENGTH:1024,MAX_CHUNK_LENGTH:3e4,MIN_CHUNK_OVERLAP:256,EMBEDDING_MODEL_TOKENS_LIMIT:8191,EMBEDDING_MAX_BATCH_SIZE:2048,EMBEDDING_ENCODING_FORMAT:"float",TOP_K:3,MAX_CHUNKS_ATTACHED_TO_LLM:20,OLLAMA_EMBEDDINGS_ENDPOINT:"http://localhost:11434/api/embeddings",OLLAMA_EMBEDDINGS_MODEL:"mxbai-embed-large"},to=`Below is some CONTEXT for you to answer the questions. ONLY answer from the CONTEXT. CONTEXT consists of multiple information chunks. Each chunk has a source mentioned at the end.

For each piece of response you provide, cite the source in brackets like so: [1].

At the end of the answer, always list each source with its corresponding number and provide the document name. like so [1] Filename.doc.

If you don't know the answer, just say that you don't know. Ask for more context and better questions if needed.`;import*as Y from"@clack/prompts";import Ee from"fs/promises";import Ie from"path";import{getDocumentProxy as Ii,extractText as _i}from"unpdf";import*as Ao from"xlsx";async function tt(e){let o=e.type;o.includes("charset")&&(o="text/plain");let t="";return o==="text/plain"?t=await ki(e):o==="application/pdf"?t=await Ri(e):o==="text/csv"?t=await Oi(e):o.includes("application/vnd")?t=await Di(e):t=await $i(e),t=Li(t),t}async function ki(e){return await e.text()}async function Ri(e){let o=await Ii(await e.arrayBuffer()),{text:t}=await _i(o,{mergePages:!0});return typeof t=="string"?t:t.join(`
`)}async function Oi(e){let o=await e.text();return Zt(o)}async function Di(e){let o=await e.arrayBuffer(),t=Ao.read(new Uint8Array(o),{type:"array"}),r="";for(let n of t.SheetNames){let s=t.Sheets[n],i=Ao.utils.sheet_to_csv(s),a=Zt(i);r+=a+`

`}return r}async function $i(e){return await e.text()}function Li(e){return e.replace(/([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF])/g,"")}function Zt(e){let o=e.split(`
`),t=o[0].replace("\r","");return o.slice(1).map(n=>n.trim()===""||/^[,]+$/.test(n.trim())?"":t+`
`+n).join(`

`)}import*as pt from"@clack/prompts";import{fromZodError as ur}from"zod-validation-error";import*as er from"@clack/prompts";import Ni from"compute-cosine-similarity";import To from"fs/promises";import{Low as or}from"lowdb";import{JSONFile as tr}from"lowdb/node";import rt from"path";import Fi from"picocolors";import{z as ro}from"zod";var ji=ro.object({id:ro.string().uuid(),text:ro.string().trim().min(1),embedding:ro.array(ro.number())}),Io={documents:{},chunks:{}};async function nt(e){let o=rt.join(process.cwd(),".baseai","db"),t=rt.join(o,`${e}.json`);await To.mkdir(o,{recursive:!0});try{await To.access(t)}catch{await To.writeFile(t,JSON.stringify(Io,null,2))}let r=new tr(t),n=new or(r,Io);return await n.read(),n.data===null&&(n.data=Io,await n.write()),n}async function Gi(e){let o=new tr(e),t=new or(o,Io);return await t.read(),t}async function je(e){try{let o=Bi(e);return await To.access(o),await Gi(o)}catch(o){if(o.code==="ENOENT")return await nt(e);throw o}}async function rr({db:e,docName:o}){if(e.data.documents[o]){er.log.info(`[SKIPPED] DOC: ${Fi.cyan(o)} already exists.`);return}e.data.documents[o]={name:o,chunkIds:[]},await e.write()}function nr(e,o){return e.data.documents[o]}async function _o({db:e,docName:o}){if(!e.data.documents[o])throw new Error(`Document with name "${o}" does not exist`);for(let t of e.data.documents[o].chunkIds)delete e.data.chunks[t];delete e.data.documents[o],await e.write()}async function sr({db:e,docName:o,chunks:t}){if(!e.data.documents[o])throw new Error(`Document with name "${o}" does not exist`);for(let r of t){let n=crypto.randomUUID(),s=ji.parse({...r,id:n});e.data.chunks[n]=s,e.data.documents[o].chunkIds.push(n)}await e.write()}async function ko(e){let o=[];for(let t of e){let r=await je(t);for(let[n,s]of Object.entries(r.data.documents)){let i=s.chunkIds.map(a=>{let p=r.data.chunks[a];return{text:p.text,embedding:p.embedding,attributes:{memoryName:t,docName:n}}});o.push(...i)}}return o}function Ro({chunks:e,queryEmbedding:o,topK:t}){if(t<=0||e.length===0)return[];let r=e.map(n=>({text:n.text,attributes:n.attributes,similarity:Ni(n.embedding,o)||0}));return r.sort((n,s)=>s.similarity-n.similarity),r.slice(0,t)}function Bi(e){let o=process.cwd();return rt.join(o,".baseai","db",`${e}.json`)}import{z as ee}from"zod";var no=ee.string().min(3,"Memory name must be at least 3 characters long").max(50,"Memory name must not exceed 50 characters").regex(/^[a-zA-Z0-9.-]+$/,"Memory name can only contain letters, numbers, dots, and hyphens"),qi=ee.string().trim().min(1),ir=ee.object({memoryName:no,documentName:qi}),Oo=ee.object({useGitRepo:ee.boolean(),dirToTrack:ee.string().trim().min(1,"Directory to track must not be empty"),extToTrack:ee.union([ee.tuple([ee.literal("*")]),ee.array(ee.string().trim().regex(/^\.\w+$/,"File extension must start with a dot followed by alphanumeric characters")).min(1,"At least one file extension must be specified")]),deployedCommitHash:ee.string().optional(),embeddedCommitHash:ee.string().optional()});import*as pr from"@clack/prompts";import Ge from"chalk";import Hi from"util";import Ui from"log-symbols";var Ji=Ge.blue.inverse,Ki=["sensitive","secret","hide","private","password","token","key","auth","authorization","redact"],st=class e{constructor(o){this.config=o}static async initialize(){if(!e.instance){let o=await oe();e.instance=new e(o.log)}return e.instance}formatValue(o){return typeof o=="object"&&o!==null?Hi.inspect(o,{colors:!0,depth:null}):typeof o=="string"?Ge.green(`"${o}"`):typeof o=="number"?Ge.yellow(o.toString()):typeof o=="boolean"?Ge.cyan(o.toString()):String(o)}isSensitiveData(o){return Ki.some(t=>o.toLowerCase().includes(t))}formatAndRedactSensitiveData(o,t){return t&&!this.config.logSensitiveData?Ge.red("======REDACTED======"):this.formatValue(o)}isCategoryEnabled(o){let t=o.split("."),r="";for(let n of t)if(r+=(r?".":"")+n,r in this.config){let s=this.config[r];if(typeof s=="boolean"&&s===!1)return!1}return!0}logValue(o,t,r){let n=this.formatAndRedactSensitiveData(t,this.isSensitiveData(r||o)),s=r?`${Ge.blue.bold(r)}`:"";console.log(`
${Ui.info} ${Ji(` ${o} `)} ${s}
${n}`)}log(o,t,r){!this.config.isEnabled||!this.isCategoryEnabled(o)||this.logValue(o,t,r)}},ar=st;var at=null,it=null,lr=async()=>{it||(it=ar.initialize()),at=await it},Vi=()=>(at||(pr.cancel("Logger has not been initialized. Call initLogger() first."),process.exit(1)),at),ue=(e,o,t)=>{Vi().log(e,o,t)};import*as cr from"@clack/prompts";async function Be(e){try{return await mr("test"),(await Promise.all(e.map(n=>mr(n)))).map(n=>n.embedding).map(n=>({embedding:n}))}catch(o){throw console.error("Error generating embeddings:",o),o}}async function mr(e){let o=x.OLLAMA_EMBEDDINGS_ENDPOINT,t=JSON.stringify({model:x.OLLAMA_EMBEDDINGS_MODEL,prompt:e});try{let r=await fetch(o,{method:"POST",headers:{"Content-Type":"application/json"},body:t});if(!r.ok)throw new Error(`Error: ${r.statusText}`);return await r.json()}catch(r){throw console.error(),cr.cancel(`Error generating embeddings with Ollama. Please ensure that Ollama is running and the embeddings '${x.OLLAMA_EMBEDDINGS_MODEL}' model is enabled.`),process.exit(1),r}}import*as dr from"@clack/prompts";import{getEncoding as zi}from"js-tiktoken";import Xi from"openai";var qe=async e=>{let o=process.env.OPENAI_API_KEY;o||(dr.cancel("OpenAI key not found. Please set the OPENAI_API_KEY environment variable. Only required locally, in production, add it to your keysets https://langbase.com/docs/features/keysets"),process.exit(1));try{let t=new Xi({apiKey:o}),r=zi("cl100k_base"),n=0;for(let a of e){let p=r.encode(a).length;if(n+=p,p>x.EMBEDDING_MODEL_TOKENS_LIMIT)throw new Error(`Input exceeds the maximum token limit of ${x.EMBEDDING_MODEL_TOKENS_LIMIT}.`)}let s=[],i=x.EMBEDDING_MAX_BATCH_SIZE;for(let a=0;a<e.length;a+=i){let p=e.slice(a,a+i),{data:l}=await t.embeddings.create({model:x.EMBEDDING_MODEL,dimensions:x.EMBEDDING_DIMENSIONS,input:p,encoding_format:x.EMBEDDING_ENCODING_FORMAT});s.push(...l)}return s}catch(t){throw console.error("Error:",t),new Error("Error getting OpenAI embeddings")}};function so(e){return e===0?"0 bytes":e<1024?e.toFixed(2)+" bytes":e<1024*1024?(e/1024).toFixed(2)+" KB":(e/1048576).toFixed(2)+" MB"}var Do=e=>{let o=no.safeParse(e);if(!o.success){let t=ur(o.error).message;pt.cancel(`Invalid memory name: ${t}`),process.exit(1)}return o.data},fr=({memoryName:e,documentName:o})=>{let t=ir.safeParse({memoryName:e,documentName:o});if(!t.success){let r=ur(t.error).message;pt.cancel(`Invalid input: ${r}`),process.exit(1)}return t.data};var gr=async({messages:e,memoryNames:o})=>{var t;try{let r=o.length>0;ue("memory",r,"Memory attached");let n=e.length>0;if(!r||!n)return;let s=[...e].reverse().find(d=>d.role==="user"),i=s==null?void 0:s.content;if(!i)return;let p=((t=(await oe()).memory)==null?void 0:t.useLocalEmbeddings)||!1,l=[];p?(u("Generating local embeddings"),l=await Be([i])):(u("Generating OpenAI embeddings"),l=await qe([i]));let m=await ko(o);if(m.length===0)return;let c=Ro({chunks:m,queryEmbedding:l[0].embedding,topK:x.MAX_CHUNKS_ATTACHED_TO_LLM});return c.length===0?void 0:(ue("memory.similarChunks",c),c)}catch(r){u("utils/memory/lib.ts: addContextFromMemory: error:",r)}};import lt from"fs/promises";import mt from"path";import*as io from"@clack/prompts";function Yi(e){let o=e.split(",").map(t=>t.trim().replace(/['"]/g,""));return mt.join(...o)}function Wi(e){let o=e.replace(/\s+(?=(?:(?:[^"]*"){2})*[^"]*$)/g,""),t=o.match(/useGitRepo:(true|false)/),r=o.match(/dirToTrack:(?:path\.(?:posix\.)?join\((.*?)\)|['"](.+?)['"])/),n=o.match(/extToTrack:(\[.*?\])/),s=o.match(/deployedCommitHash:['"](.+?)['"]/),i=o.match(/embeddedCommitHash:['"](.+?)['"]/);if(!t||!r||!n)throw new Error("Unable to parse config structure");let a=t[1]==="true",p=r[2]?r[2]:Yi(r[1]),l=JSON.parse(n[1].replace(/'/g,'"')),m=s?s[1]:void 0,c=i?i[1]:void 0,d={useGitRepo:a,dirToTrack:p,extToTrack:l};m&&(d.deployedCommitHash=m),c&&(d.embeddedCommitHash=c);let f=Oo.safeParse(d);if(!f.success)throw new Error(`Invalid config: ${f.error.message}`);return d}async function ao(e){try{let o=mt.join(process.cwd(),"baseai","memory",e),t=mt.join(o,"index.ts");await lt.access(o),await lt.access(t);let n=(await lt.readFile(t,"utf-8")).match(/config\s*:\s*({[\s\S]*?})/);if(!n)return null;try{return Wi(n[1])}catch(s){s instanceof Error?io.cancel(`Unable to read config in '${e}/index.ts': ${s.message}`):io.cancel(`Unable to read config in '${e}/index.ts': Unknown error occurred`),process.exit(1)}}catch(o){o instanceof Error?io.cancel(`Memory '${e}' does not exist or could not be loaded: ${o.message}`):io.cancel(`Memory '${e}' does not exist or could not be loaded: Unknown error occurred`),process.exit(1)}}import{execSync as Qi}from"child_process";var we=async e=>{let o=await ea(e);return!o||!(o!=null&&o.useGitRepo)?await Zi(e):await ct({memoryName:e,memoryConfig:o})},ct=async({memoryName:e,memoryConfig:o})=>{let t=o.dirToTrack;try{await Ee.access(t)}catch{Y.cancel(`Documents directory for memory '${e}' does not exist.`),process.exit(1)}console.log("Reading documents in memory...");let r;try{r=Qi(`git ls-files ${t}`,{encoding:"utf-8"}).split(`
`).filter(Boolean)}catch{Y.cancel(`Failed to read documents in memory '${e}'.`),process.exit(1)}let s=o.extToTrack[0]==="*"?oo:o.extToTrack.filter(p=>oo.includes(p)),a=(await Promise.all(r.map(async p=>{if(!s.some(f=>p.endsWith(f)))return null;let m;try{m=await Ee.readFile(p)}catch{return Y.log.warn(`Failed to read file: ${p}. Skipping.`),null}let c=new Blob([m]);return c.size>x.MAX_DOC_SIZE?(Y.log.warn(`Skipping ${p}; File exceeds the maximum size of ${so(x.MAX_DOC_SIZE)}.`),null):{name:Ie.basename(p.replace(/\//g,"-")),size:so(c.size),content:await tt(c),blob:c}}))).filter(p=>p!==null);return a.length===0?[]:a},Zi=async e=>{let o=Ie.join(process.cwd(),"baseai","memory",e),t=Ie.join(o,"documents");try{await Ee.access(t)}catch{Y.cancel(`Documents directory for memory '${e}' does not exist.`),process.exit(1)}let r;try{r=await Ee.readdir(t)}catch{Y.cancel(`Failed to read documents in memory '${e}'.`),process.exit(1)}let s=(await Promise.all(r.map(async i=>{if(!oo.some(d=>i.endsWith(d)))return Y.log.warn(`Skipping ${i}; Unsupported file extension.`),null;let p=Ie.join(t,i),l;try{l=await Ee.readFile(p)}catch{return Y.log.warn(`Failed to read file: ${i}. Skipping.`),null}let m=new Blob([l]);return m.size>x.MAX_DOC_SIZE?(Y.log.warn(`Skipping ${i}; File exceeds the maximum size of ${so(x.MAX_DOC_SIZE)}.`),null):{name:i,size:so(m.size),content:await tt(m),blob:m}}))).filter(i=>i!==null);return s.length===0?[]:s};async function ea(e){let o=await ao(e);return o!==null?(Oo.safeParse(o).success||(Y.cancel(`Memory '${e}' has an invalid config.`),process.exit(1)),{...o}):null}var $o=async e=>{let o=Ie.join(process.cwd(),"baseai","memory",e),t=Ie.join(o,"documents");try{await Ee.access(t)}catch{Y.cancel(`Documents directory for memory '${e}' does not exist.`),process.exit(1)}try{let r=await Ee.readdir(t);return(await Promise.all(r.map(async s=>{let i=Ie.join(t,s),a=await Ee.stat(i),p=oo.some(m=>s.endsWith(m)),l=a.size<=x.MAX_DOC_SIZE;return p&&l?s:null}))).filter(s=>s!==null)}catch{Y.cancel(`Failed to read documents in memory '${e}'.`),process.exit(1)}};import hr from"chalk";import oa from"cli-table3";import*as dt from"@clack/prompts";function yr(e,o){let t=new Set([...e,...o]),r=Array.from(t).map(s=>[e.includes(s)?s:"",o.includes(s)?s:""]),n=new oa({head:[hr.cyan("Local"),hr.cyan("Prod")],chars:{top:"\u2550","top-mid":"\u2564","top-left":"\u2554","top-right":"\u2557",bottom:"\u2550","bottom-mid":"\u2567","bottom-left":"\u255A","bottom-right":"\u255D",left:"\u2551","left-mid":"\u255F",mid:"\u2500","mid-mid":"\u253C",right:"\u2551","right-mid":"\u2562",middle:"\u2502"}});r.forEach(s=>n.push(s)),dt.log.message("Prod and local are out of sync."),dt.log.message(`
${n.toString()}`)}import*as g from"@clack/prompts";import co from"fs/promises";import _e from"node-fetch";import me from"path";import xt from"picocolors";import{execSync as ft}from"child_process";import*as le from"@clack/prompts";import Cr from"fs/promises";import*as xr from"@clack/prompts";import br from"path";async function wr({memoryName:e,deployedCommitHash:o}){try{let t=br.join(process.cwd(),"baseai","memory",e),r=br.join(t,"index.ts"),n=await Cr.readFile(r,"utf-8");n.includes("deployedCommitHash:")?n=n.replace(/deployedCommitHash:\s*['"].*['"]/,`deployedCommitHash: '${o}'`):n=n.replace(/config:\s*{/,`config: {
    deployedCommitHash: '${o}',`),await Cr.writeFile(r,n,"utf-8"),xr.log.success(`Updated deployedCommitHash for memory '${e}'.`)}catch(t){throw console.error(`Error saving latest commit hash: ${t}`),t}}import{execSync as Pr}from"child_process";async function vr({oldCommit:e,latestCommit:o="HEAD",dirToTrack:t}){try{if(e==="")throw new Error("Invalid commit references");let r=process.cwd(),n=`git diff --diff-filter=ACMRT --name-only ${e} ${o} -- ${t}`,s=`git diff --diff-filter=D --name-only ${e} ${o} -- ${t}`,i=Pr(n,{encoding:"utf-8",cwd:r}).trim(),a=Pr(s,{encoding:"utf-8",cwd:r}).trim(),p=i.split(`
`).filter(Boolean),l=a.split(`
`).filter(Boolean);return p=p.map(m=>m.replace(/\//g,"-")),l=l.map(m=>m.replace(/\//g,"-")),{changedFiles:p,deletedFiles:l}}catch(r){throw console.error("Error executing Git command:",r),r}}import*as W from"@clack/prompts";import He from"figures";import fe from"picocolors";var ut=class{constructor(o){if(this.chunkSize=o.chunkMaxLength,this.chunkOverlap=o.chunkOverlap,this.keepSeparator=!0,this.lengthFunction=t=>t.length,this.chunkOverlap>=this.chunkSize)throw new Error("Cannot have chunkOverlap >= chunkSize")}async splitText(o){throw new Error("splitText method must be implemented in subclass")}async mergeSplits(o,t){let r=[],n=[],s=0;for(let a of o){let p=await this.lengthFunction(a);if(s+p+(n.length>0?t.length:0)>this.chunkSize&&(s>this.chunkSize&&console.warn(`Created a chunk of size ${s}, which is longer than the specified ${this.chunkSize}`),n.length>0)){let l=this.joinDocs(n,t);for(l!==null&&r.push(l);s>this.chunkOverlap||s+p>this.chunkSize&&s>0;)s-=await this.lengthFunction(n[0]),n.shift()}n.push(a),s+=p}let i=this.joinDocs(n,t);return i!==null&&r.push(i),r}joinDocs(o,t){let r=o.join(t).trim();return r===""?null:r}async createChunks(o){return(await this.splitText(o)).map(r=>r.replace(/\0/g,""))}},Lo=class e extends ut{constructor(t,r){super(t);this.separators=[`

`,`
`," ",""];r&&(this.separators=r)}async splitText(t){return this._splitText(t,this.separators)}async _splitText(t,r){let n=[],s=r[r.length-1],i;for(let m=0;m<r.length;m+=1){let c=r[m];if(c===""){s=c;break}if(t.includes(c)){s=c,i=r.slice(m+1);break}}let a=this.splitOnSeparator(t,s),p=[],l=this.keepSeparator?"":s;for(let m of a)if(await this.lengthFunction(m)<this.chunkSize)p.push(m);else{if(p.length){let c=await this.mergeSplits(p,l);n.push(...c),p=[]}if(!i)n.push(m);else{let c=await this._splitText(m,i);n.push(...c)}}if(p.length){let m=await this.mergeSplits(p,l);n.push(...m)}return n}splitOnSeparator(t,r){let n;if(r)if(this.keepSeparator){let s=r.replace(/[/\-\\^$*+?.()|[\]{}]/g,"\\$&");n=t.split(new RegExp(`(?=${s})`))}else n=t.split(r);else n=t.split("");return n.filter(s=>s!=="")}static fromLanguage(t,r){let n=e.getSeparatorsForLanguage(t);return new e(r,n)}static getSeparatorsForLanguage(t){throw new Error("getSeparatorsForLanguage method not implemented")}};async function No({memoryFiles:e,memoryName:o,overwrite:t=!1,useLocalEmbeddings:r}){var c;let n,s=0,i=e.length,a=0,p=0,l=0;try{n=await je(o)}catch{W.cancel(`Failed to load database for memory '${o}'.`),process.exit(1)}let m=new Lo({chunkMaxLength:x.MIN_CHUNK_LENGTH,chunkOverlap:x.MIN_CHUNK_OVERLAP});for(let{name:d,content:f}of e){let O=nr(n,d);if(O&&t&&(W.log.info(`Removing existing embeddings for DOC: ${fe.cyan(d)}`),await _o({db:n,docName:d})),O&&!t){W.log.info(`[SKIPPED] DOC: ${fe.cyan(d)} already exists.`),p++;continue}W.log.info(`Embedding document: ${d}`);try{rr({db:n,docName:d});let V;try{V=await m.createChunks(f)}catch{W.log.error(`Failed to split document "${d}" into chunks. Skipping.`),l++;continue}let Pe;try{let ae=((c=(await oe()).memory)==null?void 0:c.useLocalEmbeddings)||!1;r??ae?(u("Generating local embeddings"),Pe=await Be(V)):(u("Generating OpenAI embeddings"),Pe=await qe(V))}catch(P){W.cancel(P.message),W.log.error(`Failed to generate embeddings for document "${d}". Skipping.`),l++;continue}let Ye=V.map((P,ae)=>({text:P,embedding:Pe[ae].embedding}));try{await sr({db:n,docName:d,chunks:Ye}),s+=Ye.length,a++,W.log.success(`Successfully embedded document: ${d}`)}catch{W.log.error(`Failed to add chunks for document "${d}" to the database. Skipping.`),l++}}catch{W.log.error(`An unexpected error occurred while processing document "${d}". Skipping.`),l++}}return ta({totalDocs:i,successfulDocs:a,skippedDocs:p,totalEmbeddings:s}),a===0&&p===0&&(W.cancel("No documents were successfully embedded or skipped. Process failed."),process.exit(1)),a===0&&p===i?`All documents were skipped. No new embeddings were generated. 
${fe.dim(`${He.arrowRight} Use --overwrite, -o flag to replace existing embeddings.`)}`:"All done!"}function ta({totalDocs:e,successfulDocs:o,skippedDocs:t,totalEmbeddings:r}){let n=e-o-t,s=27,i=(p,l,m,c)=>{let d=p.padEnd(s);return`${m} ${d} ${c(l)}`},a=[fe.bold(fe.cyan("Embedding Generation Summary:")),"",i("Total documents:",`${e}`,He.info,fe.blue),...t>0?[i("Skipped:",`${t}/${e} docs`,He.warning,fe.yellow)]:[],i("Successfully embedded:",`${o}/${e} docs`,He.tick,fe.green),...n>0?[i("Failed:",`${n}/${e} docs`,He.cross,fe.red)]:[],i("Total embeddings generated:",`${r}`,He.pointer,fe.magenta),""].join(`
`);W.log.info(a)}async function Er({memoryName:e}){let o=await je(e);return Object.keys(o.data.documents)}import Sr from"fs/promises";import*as Ar from"@clack/prompts";import Mr from"path";async function Tr({memoryName:e,embeddedCommitHash:o}){try{let t=Mr.join(process.cwd(),"baseai","memory",e),r=Mr.join(t,"index.ts"),n=await Sr.readFile(r,"utf-8");n.includes("embeddedCommitHash:")?n=n.replace(/embeddedCommitHash:\s*['"].*['"]/,`embeddedCommitHash: '${o}'`):n=n.replace(/config:\s*{/,`config: {
    embeddedCommitHash: '${o}',`),await Sr.writeFile(r,n,"utf-8"),Ar.log.success(`Updated embeddedCommitHash for memory '${e}'.`)}catch(t){throw console.error(`Error saving latest commit hash: ${t}`),t}}async function Fo({memoryName:e,config:o,account:t}){let r=!t;try{ft("git status --porcelain").toString().trim()&&(le.log.error(`There are uncommitted changes in the Git repository for ${r?"embedding":"deploying"} git-synced memory "${e}".`),le.log.info(`Please commit these changes before ${r?"embedding":"deploying"}. Aborting.`),process.exit(1))}catch(c){le.log.error(`Failed to check if there are uncommitted changes: ${c}`),process.exit(1)}let n=[],s=[],i=r?await Er({memoryName:e}):await po({account:t,memoryName:e}),p=(await ct({memoryName:e,memoryConfig:o})).map(c=>c.name),l=p.filter(c=>!i.some(d=>d===c)),m=r?o.embeddedCommitHash:o.deployedCommitHash;if(!m)n=p,le.log.info(`Found no previous deployed commit. Deploying all ${n.length} files in memory "${e}":`);else{let{changedFiles:c,deletedFiles:d}=await vr({oldCommit:m,latestCommit:"HEAD",dirToTrack:o.dirToTrack});if(n=c,s=d,n.length>0)le.log.info(`Found ${n.length} changed files for memory "${e}":`),n.forEach(f=>le.log.message(f));else{let f=!t;le.log.info(`No file changes detected for memory "${e}" since last ${f?"embedding":"deployment"}.`)}if(s.length>0)le.log.info(`Found ${s.length} deleted files for memory "${e}":`),s.forEach(f=>le.log.message(f));else{let f=!t;le.log.info(`No deleted file detected for memory "${e}" since last ${f?"embedding":"deployment"}.`)}}return n=[...new Set([...n,...l])],s=s.filter(c=>!n.includes(c)),{filesToDeploy:n,filesToDelete:s}}async function gt(e){let o=ft("git rev-parse HEAD").toString().trim();await wr({memoryName:e,deployedCommitHash:o})}async function Ir(e){let o=ft("git rev-parse HEAD").toString().trim();await Tr({memoryName:e,embeddedCommitHash:o})}import*as lo from"@clack/prompts";import*as ht from"@clack/prompts";import _r from"fs/promises";import kr from"path";var Ue=async e=>{let o=kr.join(process.cwd(),"baseai","memory",e),t=kr.join(o,"index.ts");try{await _r.access(o)}catch{ht.cancel(`Memory '${e}' does not exist.`),process.exit(1)}try{await _r.access(t)}catch{ht.cancel(`Index file for memory '${e}/index.ts' does not exist.`),process.exit(1)}return!0};import ra from"picocolors";var jo=async({memoryName:e,documentName:o,spinner:t})=>{e||(lo.cancel("Memory name is required. Use --memory or -m flag to specify."),process.exit(1)),o||(lo.cancel("Document name is required. Use --document or -d flag to specify."),process.exit(1));let{memoryName:r,documentName:n}=fr({memoryName:e,documentName:o});await Ue(r),t.start("Loading docs...");let s=await we(r);s.length===0&&(lo.cancel(`No valid documents found in memory '${e}'.`),process.exit(1));let i=s.find(a=>a.name===n);return i||(t.stop("Stopped!"),lo.cancel(`Doc: ${ra.cyan(n)} not found in memory ${r}`),process.exit(1)),{memoryFile:i,validMemoryName:r,validDocumentName:n}};import*as B from"@clack/prompts";import yt from"path";import na from"fs/promises";async function Rr({memoryName:e,documentName:o,overwrite:t}){B.intro(h({text:"DEPLOY",sub:"Deploy a document"}));let r=B.spinner();try{let{validDocumentName:n,validMemoryName:s}=await jo({spinner:r,memoryName:e,documentName:o});r.stop("Loaded docs"),await eo({memoryName:s});let i=yt.join(process.cwd(),".baseai"),a=yt.join(i,"memory"),p=await Go({spinner:r});p||(B.outro(`No account found. Skipping deployment. 
 Run: ${z("npx baseai@latest auth")}`),process.exit(1)),await sa({account:p,spinner:r,memoryDir:a,overwrite:t,memoryName:s,documentName:n}),B.outro(h({text:"DEPLOYED",sub:"successfully",green:!0}))}catch(n){bt({spinner:r,message:"An unexpected error occurred",error:n})}}async function sa({account:e,spinner:o,overwrite:t,memoryDir:r,memoryName:n,documentName:s}){let i=yt.join(r,`${n}.json`);try{let a=await na.readFile(i,"utf-8"),p=JSON.parse(a);p||(Bo({spinner:o,name:n,type:"memory"}),process.exit(1)),B.log.step(`Processing ${s} of memory: ${n}`);let m=(await we(n)).find(c=>c.name===s);m||(o.stop(`Document ${s} not found in memory ${n}`),process.exit(1)),await Ct({memory:p,account:e,document:m,overwrite:t}),o.stop(`Finished processing document ${s} of memory ${n}`)}catch(a){qo({spinner:o,name:n,error:a,type:"memory"}),process.exit(1)}}async function Ct({memory:e,account:o,document:t,overwrite:r}){B.log.info(`Checking "${e.name}" memory for document "${t.name}".`);let n=await po({account:o,memoryName:e.name});if(r){await mo({account:o,documents:[t],name:e.name}),B.log.success(`Document "${t.name}" uploaded to memory "${e.name}".`);return}let s=await $o(e.name);if(ia({localDocs:s,prodDocs:n,deployDoc:t.name})){await mo({account:o,documents:[t],name:e.name}),B.log.success(`Document "${t.name}" uploaded to memory "${e.name}".`);return}if(n.includes(t.name)){B.log.info(`Document "${t.name}" already exists in memory "${e.name}".`),B.log.info(`Use the --overwrite flag to overwrite the existing document in memory.
`);return}let{isProdSupersetOfLocal:p,areMutuallyExclusive:l,areOverlapping:m}=Mo({localDocs:s,prodDocs:n});if(p||l||m){B.log.warning(`The documents in memory "${e.name}" are not in sync with the production memory.`),B.log.warning("Memory deploy is currently in beta. We only support overwriting the prod memory on Langbase.com."),B.log.info(`Use the --overwrite flag to overwrite the existing document in memory.
`);return}}function ia({localDocs:e,prodDocs:o,deployDoc:t}){let r=new Set(e),n=new Set(o),s=r.has(t)&&!n.has(t);if(r.size!==n.size+1)return!1;for(let i of n)if(!r.has(i))return!1;return s}async function Dr({overwrite:e=!1}){let o=g.spinner();g.intro(h({text:"DEPLOY",sub:"Deploy your BaseAI project"}));try{await So({calledAsCommand:!1});let t=me.join(process.cwd(),".baseai"),r=me.join(t,"pipes"),n=await aa({spinner:o,pipesDir:r});n||g.outro(`No pipes found. Skipping deployment of pipes. 
Add a pipe by running: ${z("npx baseai@latest pipe")} command`);let s=me.join(t,"memory"),i=await $r({spinner:o,memoryDir:s}),a=me.join(t,"tools"),p=await pa({spinner:o,toolsDir:a}),l=await Go({spinner:o});l||(g.outro(`No account found. Skipping deployment. 
 Run: ${z("npx baseai@latest auth")}`),process.exit(1)),i&&i.length>0&&await ha({spinner:o,memory:i,memoryDir:s,account:l,overwrite:e}),n&&await la({spinner:o,pipes:n,pipesDir:r,account:l}),g.outro(h({text:"DEPLOYED",sub:"successfully",green:!0})),g.log.warning(te(`Make sure ${z("LANGBASE_API_KEY")} exists in your production environment.`)),g.log.info(`${be("Successfully deployed:")}
${be(`- ${xo(n==null?void 0:n.length)} pipe${(n==null?void 0:n.length)!==1?"s":""}
- ${xo((p==null?void 0:p.length)??0)} tool${(p==null?void 0:p.length)!==1?"s":""}
- ${xo((i==null?void 0:i.length)??0)} memory${(i==null?void 0:i.length)!==1?"sets":""}`)}`)}catch(t){bt({spinner:o,message:"An unexpected error occurred",error:t})}}async function aa({spinner:e,pipesDir:o}){e.start("Reading pipes directory");try{let r=(await co.readdir(o)).filter(n=>me.extname(n)===".json");return e.stop(`Found ${r.length} pipe${r.length!==1?"s":""}`),r}catch(t){return wt({spinner:e,dir:o,error:t}),null}}async function pa({spinner:e,toolsDir:o}){e.start("Reading tools directory");try{let r=(await co.readdir(o)).filter(n=>me.extname(n)===".json");return e.stop(`Found ${r.length} tool${r.length!==1?"s":""}`),r}catch(t){return wt({spinner:e,dir:o,error:t}),null}}async function Go({spinner:e}){e.start("Retrieving stored authentication");try{let o=await bo();return o?(e.stop(`Deploying as ${xt.cyan(o.login)}`),o):(ua({spinner:e}),null)}catch(o){return fa({spinner:e,error:o}),null}}async function la({spinner:e,pipes:o,pipesDir:t,account:r}){for(let n of o)me.extname(n)===".json"&&(await new Promise(s=>setTimeout(s,500)),await ma({spinner:e,pipe:n,pipesDir:t,account:r}))}async function ma({spinner:e,pipe:o,pipesDir:t,account:r}){let n=me.join(t,o);e.start(`Processing pipe: ${o}`);try{let s=await co.readFile(n,"utf-8"),i=JSON.parse(s);if(!i){Bo({spinner:e,name:o,type:"pipe"});return}e.stop(`Processed pipe: ${o}`),e.start(`Deploying pipe: ${i.name}`),i.model.includes(U)&&(e.stop(`Local Ollama model found: ${i.model}. It can not be deployed.`),e.start("Replacing Ollama model with OpenAI gpt-4o-mini model for deployment."),i.model="openai:gpt-4o-mini");try{await new Promise(p=>setTimeout(p,500));let a=await da({pipe:i,account:r});e.stop(`Successfully deployed pipe: ${a.name}`)}catch(a){qo({spinner:e,name:i.name,error:a,type:"pipe"})}}catch(s){ga({spinner:e,name:o,error:s})}}function ca(e){return{createUrl:"https://api.langbase.com/v1/pipes",updateUrl:`https://api.langbase.com/v1/pipes/${e}`}}async function da({pipe:e,account:o}){var r;let{createUrl:t}=ca(e.name);try{let n=await _e(t,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.apiKey}`},body:JSON.stringify({...e,upsert:!0})});if(n.ok)return await n.json();let s=await n.json();throw new Error(`HTTP error! status: ${n.status}, message: ${(r=s.error)==null?void 0:r.message}`)}catch(n){throw console.error("Error in createNewPipe:",n),n}}function bt({spinner:e,message:o,error:t}){e.stop(o),g.log.error(`${o}: ${t.message}`)}function wt({spinner:e,dir:o,error:t}){e.stop("Failed to read build directory"),t.code==="ENOENT"?(g.log.error(`BaseAI Directory not found: ${o}`),g.log.info(`Run from the root of your project where the ${xt.cyan("baseai")} directory is located.`)):g.log.error(`Error reading directory: ${t.message}`)}function ua({spinner:e}){e.stop("No account found"),g.log.warn("No account found. Please authenticate first."),g.log.info(`Run: ${xt.green("npx baseai auth")}`)}function fa({spinner:e,error:o}){e.stop("Failed to retrieve authentication"),g.log.error(`Error retrieving stored auth: ${o.message}`)}function Bo({spinner:e,name:o,type:t}){e.stop(`Failed to extract ${t} configuration from ${o}`),g.log.error(`Invalid ${t} configuration`)}function qo({spinner:e,error:o,name:t,type:r}){e.stop(`Failed to deploy ${r}: ${t}`),g.log.error(`Deployment error: ${o.message}`),process.exit(0)}function ga({spinner:e,name:o,error:t}){e.stop(`Error processing ${o}`),g.log.error(`File processing error: ${t.message}`)}async function $r({spinner:e,memoryDir:o}){e.start("Reading memory directory");try{let t=await co.readdir(o);return e.stop(),t}catch(t){return wt({spinner:e,dir:o,error:t}),null}}async function ha({spinner:e,memory:o,memoryDir:t,account:r,overwrite:n}){for(let s of o)await Lr({spinner:e,memoryName:s,memoryDir:t,account:r,overwrite:n})}async function Lr({spinner:e,memoryName:o,memoryDir:t,account:r,overwrite:n}){var a,p;let s=me.join(t,o),i=o.split(".")[0];e.start(`Processing memory: ${i}`);try{let l=await co.readFile(s,"utf-8"),m=JSON.parse(l);if(!m){Bo({spinner:e,name:o,type:"memory"});return}g.log.step(`Processing documents for memory: ${i}`);let c=[],d=[],f=[];if((a=m.config)!=null&&a.useGitRepo){let{filesToDeploy:O,filesToDelete:V}=await Fo({memoryName:i,config:m.config,account:r});c=O,d=V,f=await we(i),f=f.filter(Pe=>c.includes(Pe.name))}else f=await we(i),c=f.map(O=>O.name);c.length===0&&e.stop(`No documents to deploy for memory: ${i}. Skipping.`),e.stop(`Processed memory: ${o.split(".")[0]}`),e.start(`Deploying memory: ${m.name.split(".")[0]}`);try{await Nr({memory:m,documents:f,account:r,overwrite:n,isGitSync:(p=m.config)==null?void 0:p.useGitRepo,docsToDelete:d}),e.stop(`Deployment finished memory: ${m.name}`)}catch(O){throw u("Error in upsertMemory:",O),O}}catch(l){throw qo({spinner:e,name:o,error:l,type:"memory"}),e.stop(`Error processing memory: ${o}`),l}}async function Nr({memory:e,documents:o,account:t,overwrite:r,isGitSync:n=!1,docsToDelete:s=[]}){var a,p;let{createMemory:i}=uo({memoryName:e.name});try{await new Promise(c=>setTimeout(c,800));let l=await _e(i,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t.apiKey}`},body:JSON.stringify(e)});if(!l.ok){let c=await l.json();if((a=c.error)!=null&&a.message.includes("already exists")){if(!n){g.log.info(`Memory "${e.name}" already exists in production.`),await ya({memory:e,account:t,documents:o,overwrite:r});return}if(n){g.log.info(`Memory "${e.name}" already exists. Updating changed documents.`),await va({memory:e,account:t,documents:o,overwrite:r}),(s==null?void 0:s.length)>0&&await Or({documents:s,name:e.name,account:t}),await gt(e.name),g.log.info(`Updated deployed commit hash for memory: ${e.name}`);return}}throw new Error(`HTTP error! status: ${l.status}, message: ${(p=c.error)==null?void 0:p.message}`)}u("Memory created successfully");let{name:m}=await l.json();await mo({documents:o,name:m,account:t}),n&&((s==null?void 0:s.length)>0&&await Or({documents:s,name:e.name,account:t}),await gt(e.name),g.log.info(`Updated deployed commit hash for memory: ${e.name}`))}catch(l){throw u("Error in createNewMemory:",l),l}}async function mo({documents:e,name:o,account:t}){for(let r of e)try{g.log.message(`Uploading document: ${r.name} ....`),await new Promise(i=>setTimeout(i,800));let n=await xa({documentName:r.name,memoryName:o,account:t}),s=await Pa(n,r.blob);u(`Upload response status: ${s.status}`),g.log.message(`Uploaded document: ${r.name}`)}catch(n){throw n}}async function Or({documents:e,name:o,account:t}){g.log.info(`Deleting documents from memory: ${o}`);for(let r of e)try{g.log.message(`Deleting document: ${r} ....`),await new Promise(s=>setTimeout(s,800));let n=await wa({documentName:r,memoryName:o,account:t});u(`Delete response status: ${n.status}`),g.log.message(`Deleted document: ${r}`)}catch(n){throw n}g.log.info(`Deleted documents from memory: ${o}`)}async function ya({memory:e,account:o,documents:t,overwrite:r}){g.log.info(`Fetching "${e.name}" memory documents.`);let n=await po({account:o,memoryName:e.name}),s=await $o(e.name),{areListsSame:i,isProdSubsetOfLocal:a,isProdSupersetOfLocal:p,areMutuallyExclusive:l,areOverlapping:m}=Mo({localDocs:s,prodDocs:n});if(r)return await Fr({memory:e,documents:t,account:o}),!0;if(i)return g.log.info(`Documents in local and prod are the same. Skipping deployment for memory: "${e.name}".`),!0;if(a)return await ba({memory:e,prodDocs:n,documents:t,account:o}),!0;if(p||l||m)return await Ca({memory:e,localDocs:s,prodDocs:n,documents:t,account:o}),!0}async function Ca({memory:e,localDocs:o,prodDocs:t,documents:r,account:n}){if(yr(o,t),g.log.warning("Memory deploy is currently in beta. We only support overwriting the prod memory on Langbase.com."),!await g.confirm({message:"Do you want to overwrite the prod memory? This will delete all prod documents.",initialValue:!1})){g.log.message(`Skipping memory deployment for "${e.name}".`);return}await Fr({memory:e,documents:r,account:n})}async function ba({memory:e,prodDocs:o,documents:t,account:r}){g.log.info(`Prod has missing documents. Uploading new documents to ${e.name}.`);let n=t.filter(s=>{let i=!o.includes(s.name);return i||g.log.message(`Document "${s.name}" already exists. Skipping.`),i});await new Promise(s=>setTimeout(s,500)),await mo({documents:n,name:e.name,account:r})}async function po({account:e,memoryName:o}){var i;let{listDocuments:t}=uo({memoryName:o});await new Promise(a=>setTimeout(a,500));let r=await _e(t,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e.apiKey}`}});if(!r.ok){let p=(i=(await r.json()).error)==null?void 0:i.message;if(p!=null&&p.includes("Invalid memory name."))return g.log.info(`Memory "${o}" does not exist in production.`),[];throw new Error(`HTTP error! status: ${r.status}, message: ${p}`)}return(await r.json()).map(a=>a.name)}async function xa({documentName:e,memoryName:o,account:t}){var i;let{uploadDocument:r}=uo({memoryName:o}),s=t.apiKey.includes(":")?t.apiKey.split(":")[0]:t.login;try{let a=await _e(r,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t.apiKey}`},body:JSON.stringify({memoryName:o,ownerLogin:s,fileName:e})});if(!a.ok){let l=await a.json();throw new Error(`HTTP error! status: ${a.status}, message: ${(i=l.error)==null?void 0:i.message}`)}let{signedUrl:p}=await a.json();if(!p)throw new Error("Invalid signedUrl received from API");return p}catch(a){throw u("Error in getSignedUploadUrl:",a),a}}async function wa({documentName:e,memoryName:o,account:t}){var n;let{deleteDocument:r}=uo({memoryName:o,documentName:e});try{let s=await _e(r,{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t.apiKey}`}});if(!s.ok){let i=await s.json();throw new Error(`HTTP error! status: ${s.status}, message: ${(n=i.error)==null?void 0:n.message}`)}return s}catch(s){throw u("Error in deleteDocument:",s),s}}async function Pa(e,o){let t=o.type;x.ACCEPTED_MIME_TYPES.includes(t)||(u(`Unsupported MIME type ${t}. Defaulting to text/plain`),t="text/plain");try{let n=await _e(e,{method:"PUT",headers:{"Content-Type":t},body:o});if(!n.ok){let s=await n.text();throw new Error(`HTTP error! status: ${n.status}, message: ${s}`)}return n}catch(n){throw u("Error in uploadDocument:",n),n}}function uo({memoryName:e,documentName:o}){let t="https://api.langbase.com/v1",r=`${t}/memory`,n=`${t}/memory/${e}`,s=`${t}/memory/documents`,i=`${t}/memory/${e}/documents`,a=`${t}/memory/${e}/documents/${o}`;return{listDocuments:i,deleteMemory:n,deleteDocument:a,createMemory:r,uploadDocument:s}}async function Fr({memory:e,documents:o,account:t}){g.log.message(`Overwriting memory "${e.name}" in prod at Langbase.com with local documents.`),u(`Deleting old memory: ${e.name}`);let{deleteMemory:r}=uo({memoryName:e.name});await new Promise(s=>setTimeout(s,500));let n=await _e(r,{method:"DELETE",headers:{Authorization:`Bearer ${t.apiKey}`}});if(!n.ok){let s=await n.text();throw new Error(`HTTP error! status: ${n.status}, message: ${s}`)}g.log.message(`Overwriting memory: ${e.name}`),await new Promise(s=>setTimeout(s,1e3)),await Nr({memory:e,documents:o,account:t,overwrite:!0})}async function va({memory:e,account:o,documents:t,overwrite:r}){for(let n in t)await new Promise(s=>setTimeout(s,800)),await Ct({memory:e,account:o,document:t[n],overwrite:!0})}async function jr({memoryName:e,overwrite:o}){let t=g.spinner();try{g.intro(h({text:"BUILDING",sub:"baseai..."})),await eo({memoryName:e}),console.log(""),g.outro(h({text:"BUILD",sub:"complete",green:!0})),g.intro(h({text:"DEPLOY",sub:"Deploy your BaseAI Memory"}));let r=me.join(process.cwd(),".baseai"),n=me.join(r,"memory"),s=await $r({spinner:t,memoryDir:n});if(!(s!=null&&s.includes(`${e}.json`))){g.log.error(`Memory "${e}" not found.`);return}let i=await Go({spinner:t});if(!i){g.log.error('Authentication failed. Please run "npx baseai auth" to authenticate.');return}await Lr({spinner:t,memoryName:`${e}.json`,memoryDir:n,account:i,overwrite:o}),g.outro(`Successfully deployed memory: ${e}`),process.exit(1)}catch(r){r instanceof Error?r.code==="ENOENT"?g.log.error("Directory or file not found. Make sure you're in the correct project directory and the memory exists."):g.log.error(`Error deploying memory: ${r.message}`):g.log.error("An unknown error occurred while deploying memory."),process.exit(1)}}import*as Ce from"@clack/prompts";import{outro as $p}from"@clack/prompts";import{serve as Lp}from"@hono/node-server";import Np from"figures";import{Hono as Fp}from"hono";import{prettyJSON as jp}from"hono/pretty-json";import{trimTrailingSlash as Gp}from"hono/trailing-slash";import Jo from"picocolors";import{z as ne}from"@hono/zod-openapi";import{HTTPException as Gr}from"hono/http-exception";import{ZodError as Ea}from"zod";import{generateErrorMessage as su}from"zod-error";import{fromZodError as Sa}from"zod-validation-error";var Ma=ne.enum(["BAD_REQUEST","FORBIDDEN","INTERNAL_SERVER_ERROR","USAGE_EXCEEDED","DISABLED","NOT_FOUND","CONFLICT","RATE_LIMITED","UNAUTHORIZED","PRECONDITION_FAILED","INSUFFICIENT_PERMISSIONS"]);var au=ne.object({success:ne.literal(!1).openapi({description:"Indicates that the request was not successful"}),error:ne.object({code:Ma.openapi({description:"A machine readable error code.",example:"INTERNAL_SERVER_ERROR"}),status:ne.number().openapi({description:"The HTTP status code"}),message:ne.string().openapi({description:"A human readable explanation of what went wrong"}),docs:ne.string().openapi({description:"A link to our documentation with more details about this error code",example:"https://langbase.com/docs/api-reference/errors/bad_request"}),cause:ne.instanceof(Ea).optional(),rateLimit:ne.object({limit:ne.number().openapi({description:"The maximum number of requests that you can make per hour"}),remaining:ne.number().openapi({description:"The number of requests remaining in the current rate limit window"}),reset:ne.number().openapi({description:"The time at which the current rate limit window resets, in UTC epoch seconds"})}).optional()})});function Br(e){switch(e){case"BAD_REQUEST":return 400;case"UNAUTHORIZED":return 401;case"FORBIDDEN":case"DISABLED":case"INSUFFICIENT_PERMISSIONS":case"USAGE_EXCEEDED":return 403;case"NOT_FOUND":return 404;case"CONFLICT":return 409;case"PRECONDITION_FAILED":return 412;case"RATE_LIMITED":return 429;case"INTERNAL_SERVER_ERROR":return 500}}var E=class extends Gr{constructor({status:o,code:t,message:r,rateLimit:n,docs:s}){super(o||Br(t),{message:r}),this.code=t,this.success=!1,this.rateLimit=n,this.docs=s}},Je=class e extends Gr{constructor({code:o,validationResult:t,customMessage:r}){let n="";if(t.error){let s=r||"",i=Sa(t.error).toString();n=`${s} HINT: ${i}`.trim()}super(Br(o),{message:n}),this.code=o,this.cause=t.error}static handle({code:o,result:t,message:r}){if(!t.success)throw new e({code:o,validationResult:t,customMessage:r})}};function qr(e,o){return e instanceof E?o.json({success:!1,error:{code:e.code,status:e.status,message:e.message,docs:e.docs||`https://langbase.com/docs/api-reference/errors/${e.code.toLowerCase()}`,rateLimit:e.rateLimit}},{status:e.status}):e instanceof Je?o.json({success:!1,error:{code:e.code,status:e.status,message:e.message,docs:`https://langbase.com/docs/api-reference/errors/${e.code.toLowerCase()}`,cause:e.cause}},{status:e.status}):o.json({success:!1,error:{code:"INTERNAL_SERVER_ERROR",status:500,message:"Something unexpected happened.",docs:"https://langbase.com/docs/api-reference/errors/internal_server_error"}},{status:500})}import{cors as Aa}from"hono/cors";var Hr=Aa({origin:"*",maxAge:86400,allowMethods:["GET","POST","OPTIONS"],allowHeaders:["Content-Type","Authorization"]});var Ur=()=>async function(o,t){await t(),o.res.headers.set("lb-powered-by","Langbase"),o.res.headers.set("powered-by","BaseAI"),o.res.headers.set("env","local")};import"hono";var Jr=()=>async function(o,t){if(o.req.method==="OPTIONS")return new Response(null);await t()};var Kr=e=>e.get("/",o=>o.json({success:!0,message:"BaseAI Local API",link:"https://langbase.com/docs"}));function Vr(e){let o=e.messages.filter(t=>t.role!=="system");return o&&o.length>0?o:[]}var q="OpenAI",J="Anthropic",N="Together",ke="Google",ge="Groq",fo="Cohere",Se="Fireworks AI",Me="Perplexity";var Ho="xAI",zr="ollama",Pt={[q]:[{id:"gpt-4o",provider:q,promptCost:5,completionCost:15,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4o-2024-08-06",provider:q,promptCost:2.5,completionCost:10,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4o-mini",provider:q,promptCost:.15,completionCost:.6,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4-turbo",provider:q,promptCost:10,completionCost:30,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4-turbo-preview",provider:q,promptCost:10,completionCost:30,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4-0125-preview",provider:q,promptCost:10,completionCost:30,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4-1106-preview",provider:q,promptCost:10,completionCost:30,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4",provider:q,promptCost:30,completionCost:60,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4-0613",provider:q,promptCost:30,completionCost:60,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-4-32k",provider:q,promptCost:60,completionCost:120,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-3.5-turbo",provider:q,promptCost:.5,completionCost:1.5,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-3.5-turbo-0125",provider:q,promptCost:.5,completionCost:1.5,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-3.5-turbo-1106",provider:q,promptCost:1,completionCost:2,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gpt-3.5-turbo-16k",provider:q,promptCost:3,completionCost:4,toolSupport:{toolChoice:!0,parallelToolCalls:!0}}],[N]:[{id:"meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo",provider:N,promptCost:5,completionCost:5,toolSupport:{toolChoice:!0,parallelToolCalls:!1}},{id:"meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo",provider:N,promptCost:.88,completionCost:.88,toolSupport:{toolChoice:!0,parallelToolCalls:!1}},{id:"meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",provider:N,promptCost:.18,completionCost:.18,toolSupport:{toolChoice:!0,parallelToolCalls:!1}},{id:"meta-llama/Llama-3-70b-chat-hf",provider:N,promptCost:.9,completionCost:.9},{id:"meta-llama/Llama-3-8b-chat-hf",provider:N,promptCost:.2,completionCost:.2},{id:"togethercomputer/Llama-2-7B-32K-Instruct",provider:N,promptCost:.2,completionCost:.2},{id:"meta-llama/Llama-2-13b-chat-hf",provider:N,promptCost:.225,completionCost:.225},{id:"meta-llama/Llama-2-70b-chat-hf",provider:N,promptCost:.9,completionCost:.9},{id:"google/gemma-7b-it",provider:N,promptCost:.2,completionCost:.2},{id:"google/gemma-2b-it",provider:N,promptCost:.1,completionCost:.1},{id:"mistralai/Mistral-7B-Instruct-v0.1",provider:N,promptCost:.2,completionCost:.2,toolSupport:{toolChoice:!0,parallelToolCalls:!1}},{id:"mistralai/Mistral-7B-Instruct-v0.2",provider:N,promptCost:.2,completionCost:.2},{id:"mistralai/Mixtral-8x7B-Instruct-v0.1",provider:N,promptCost:.6,completionCost:.6,toolSupport:{toolChoice:!0,parallelToolCalls:!1}},{id:"mistralai/Mixtral-8x22B-Instruct-v0.1",provider:N,promptCost:1.2,completionCost:1.2},{id:"databricks/dbrx-instruct",provider:N,promptCost:1.2,completionCost:1.2}],[J]:[{id:"claude-3-5-sonnet-latest",provider:J,promptCost:3,completionCost:15,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"claude-3-5-sonnet-20240620",provider:J,promptCost:3,completionCost:15,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"claude-3-opus-20240229",provider:J,promptCost:15,completionCost:75,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"claude-3-sonnet-20240229",provider:J,promptCost:3,completionCost:15,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"claude-3-haiku-20240307",provider:J,promptCost:.25,completionCost:1.25,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"claude-3-5-haiku-20241022",provider:J,promptCost:1,completionCost:5,toolSupport:{toolChoice:!0,parallelToolCalls:!0}}],[ge]:[{id:"llama-3.1-70b-versatile",provider:ge,promptCost:.59,completionCost:.79},{id:"llama-3.1-8b-instant",provider:ge,promptCost:.59,completionCost:.79},{id:"llama3-70b-8192",provider:ge,promptCost:.59,completionCost:.79},{id:"llama3-8b-8192",provider:ge,promptCost:.05,completionCost:.1},{id:"mixtral-8x7b-32768",provider:ge,promptCost:.27,completionCost:.27},{id:"gemma2-9b-it",provider:ge,promptCost:.2,completionCost:.2},{id:"gemma-7b-it",provider:ge,promptCost:.07,completionCost:.07}],[ke]:[{id:"gemini-1.5-pro-latest",provider:ke,promptCost:3.5,completionCost:10.5,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gemini-1.5-flash-latest",provider:ke,promptCost:.075,completionCost:.3,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gemini-1.5-flash-8b-latest",provider:ke,promptCost:.0375,completionCost:.15,toolSupport:{toolChoice:!0,parallelToolCalls:!0}},{id:"gemini-pro",provider:ke,promptCost:.5,completionCost:1.5,toolSupport:{toolChoice:!1,parallelToolCalls:!1}}],[fo]:[{id:"command-r",provider:fo,promptCost:.5,completionCost:1.5},{id:"command-r-plus",provider:fo,promptCost:3,completionCost:15}],[Se]:[{id:"llama-v3p1-405b-instruct",provider:Se,promptCost:3,completionCost:3},{id:"llama-v3p1-70b-instruct",provider:Se,promptCost:.9,completionCost:.9},{id:"llama-v3p1-8b-instruct",provider:Se,promptCost:.2,completionCost:.2},{id:"yi-large",provider:Se,promptCost:3,completionCost:3},{id:"llama-v3-70b-instruct",provider:Se,promptCost:.9,completionCost:.9}],[Me]:[{id:"llama-3.1-sonar-huge-128k-online",provider:Me,promptCost:5,completionCost:5,requestCost:.005},{id:"llama-3.1-sonar-large-128k-online",provider:Me,promptCost:1,completionCost:1,requestCost:.005},{id:"llama-3.1-sonar-small-128k-online",provider:Me,promptCost:.2,completionCost:.2,requestCost:.005},{id:"llama-3.1-sonar-large-128k-chat",provider:Me,promptCost:1,completionCost:1},{id:"llama-3.1-sonar-small-128k-chat",provider:Me,promptCost:.2,completionCost:.2}],[Ho]:[{id:"grok-beta",provider:Ho,promptCost:5,completionCost:15,toolSupport:{toolChoice:!0,parallelToolCalls:!1}}]},Xr=["gpt-4o","gpt-4o-2024-08-06","gpt-4o-mini","gpt-4-turbo","gpt-4-turbo-preview","gpt-4-0125-preview","gpt-3.5-turbo","gpt-3.5-turbo-0125","gpt-3.5-turbo-1106","gpt-4-1106-preview","mistralai/Mistral-7B-Instruct-v0.1","mistralai/Mixtral-8x7B-Instruct-v0.1","gemini-1.5-pro-latest","gemini-1.5-flash-latest"];var Yr=408,Wr="Output should be in JSON format.";function Qr({pipe:e,systemPrompt:o}){if(!(e!=null&&e.json))return o;let t=e.model.split(":")[1];if(!Xr.includes(t))return o;let r=Ta(e);return`${o}

${r}`}function Ta(e){var r;let o=((r=e.messages.find(n=>n.role==="system"&&n.name==="json"))==null?void 0:r.content)||"";return o===""?Wr:o}function Zr({pipe:e,similarChunks:o}){let t="";return t=Ia(e),t=ka({pipe:e,systemPrompt:t}),t=Qr({pipe:e,systemPrompt:t}),t=Ra({pipe:e,systemPrompt:t,similarChunks:o}),[{role:"system",content:t}]}function Ia(e){var s;let o="You are a helpful AI Chat assistant",t=((s=e.messages.find(i=>i.role==="system"&&!i.name))==null?void 0:s.content)||"";return t!==""?t:o}function _a(e){var o;return((o=e.messages.find(t=>t.role==="system"&&t.name==="safety"))==null?void 0:o.content)||""}function ka({pipe:e,systemPrompt:o}){let t=_a(e);return t=t!==""?`"""SAFETY GUIDELINE: ${t}"""`:"",`${o} 
 ${t}`.trim()}function Ra({pipe:e,systemPrompt:o,similarChunks:t}){var l;if(!t||t.length===0)return o;let r=t.map(m=>`${m.text} 

 Source: ${m.attributes.docName}`).join(`

`),n=((l=e.messages.find(m=>m.role==="system"&&m.name==="rag"))==null?void 0:l.content)||"",i=n!==""?n:to,a=`"""CONTEXT:
 ${r}"""`,p=`"""${i}""" 

 ${a}`;return`${o} 

 ${p}`.trim()}function en({pipe:e,messages:o,variables:t}){let r=Oa({pipe:e,variables:t});return{messages:Da({messages:o,variablesMap:r}),variablesMap:r}}function Oa({pipe:e,variables:o}){let t=e.variables?e.variables.length>0:!1,r=o?o.length>0:!1,n=t?e.variables:[],s=r?o:[],i=new Map;t&&n.forEach(p=>i.set(p.name,p.value)),r&&(s==null||s.forEach(p=>i.set(p.name,p.value)));let a=Array.from(i,([p,l])=>({name:p,value:l}));return u("finalVariables",a),i}function Da({messages:e,variablesMap:o}){let t=/{{(.*?)}}/g;return e.map(r=>{var i;if(!r.content&&r.role==="assistant"&&((i=r.tool_calls)==null?void 0:i.length)||!r.content)return r;let s=r.content.replace(t,(a,p)=>{let l=p.trim();return o.get(l)||a});return{...r,content:s}})}function on({pipe:e,messages:o,similarChunks:t,variables:r}){try{let n=Zr({pipe:e,similarChunks:t}),s=Vr(e),i=[...n,...s,...o],{messages:a}=en({pipe:e,messages:i,variables:r});return a}catch(n){throw u("Error get-run-thread.ts:",n),new E({code:"INTERNAL_SERVER_ERROR",message:"Something unexpected happened. Error generating thread of messages."})}}var $a={baseURL:"https://api.anthropic.com/v1",headers:({llmApiKey:e,endpoint:o})=>{let t={"X-API-Key":`${e}`,"anthropic-version":"2023-06-01"};return o==="chatComplete"&&(t["anthropic-beta"]="messages-2023-12-15"),t},chatComplete:"/messages"},tn=$a;var he=(e,o)=>({error:{message:`Invalid response received from ${o}: ${JSON.stringify(e)}`,type:null,param:null,code:null},provider:o}),Q=({message:e,type:o,param:t,code:r},n)=>({error:{message:`${e}`,type:o??null,param:t??null,code:r??null},provider:n}),La={mp4:"video/mp4",jpeg:"image/jpeg",jpg:"image/jpeg",png:"image/png",bmp:"image/bmp",tiff:"image/tiff",webp:"image/webp",pdf:"application/pdf",mp3:"audio/mp3",wav:"audio/wav",txt:"text/plain",mov:"video/mov",mpeg:"video/mpeg",mpg:"video/mpg",avi:"video/avi",wmv:"video/wmv",mpegps:"video/mpegps",flv:"video/flv"},rn=e=>{let o=e.split("."),t=o[o.length-1];return La[t]};var Na=e=>{let o=[],t=e.tool_calls&&e.tool_calls.length;return e.content&&typeof e.content=="string"?o.push({type:"text",text:e.content}):e.content&&typeof e.content=="object"&&e.content.length&&e.content[0].text&&o.push({type:"text",text:e.content[0].text}),t&&e.tool_calls.forEach(r=>{o.push({type:"tool_use",name:r.function.name,id:r.id,input:JSON.parse(r.function.arguments)})}),{role:e.role,content:o}},nn=e=>({role:"user",content:[{type:"tool_result",tool_use_id:e.tool_call_id,content:e.content}]}),sn={model:{param:"model",default:"claude-3-haiku",required:!0},messages:[{param:"messages",required:!0,transform:e=>{let o=[],t;return e.messages&&e.messages.forEach(r=>{if(r.role!=="system"){if(r.role==="assistant")o.push(Na(r));else if(r.content&&typeof r.content=="object"&&r.content.length){let n={role:r.role,content:[]};r.content.forEach(s=>{if(s.type==="text")n.content.push({type:s.type,text:s.text});else if(s.type==="image_url"&&s.image_url&&s.image_url.url){let i=s.image_url.url.split(";");if(i.length===2){let p=i[1].split(",")[1],l=i[0].split(":");if(l.length===2&&p){let m=l[1];n.content.push({type:"image",source:{type:"base64",media_type:m,data:p}})}}}}),o.push(n)}else if(r.role==="tool")if(t==="tool"){let s=nn(r).content;o[o.length-1].content.push(s[0])}else o.push(nn(r));else o.push({role:r.role,content:r.content});t=r.role}}),o}},{param:"system",required:!1,transform:e=>{let o="";return e.messages&&e.messages.forEach(t=>{t.role==="system"&&t.content&&typeof t.content=="object"&&t.content[0].text?o=t.content[0].text:t.role==="system"&&typeof t.content=="string"&&(o=t.content)}),o}}],tools:{param:"tools",required:!1,transform:e=>{let o=[];return e.tools&&e.tools.forEach(t=>{var r,n,s,i;t.function&&o.push({name:t.function.name,description:((r=t.function)==null?void 0:r.description)||"",input_schema:{type:((n=t.function.parameters)==null?void 0:n.type)||"object",properties:((s=t.function.parameters)==null?void 0:s.properties)||{},required:((i=t.function.parameters)==null?void 0:i.required)||[]}})}),o}},tool_choice:{param:"tool_choice",required:!1,transform:e=>{let o={};return e.tool_choice&&(typeof e.tool_choice=="string"?e.tool_choice==="required"?o={type:"any"}:e.tool_choice==="auto"&&(o={type:"auto"}):typeof e.tool_choice=="object"&&(o={type:"tool",name:e.tool_choice.function.name})),e.parallel_tool_calls||(o={...o,disable_parallel_tool_use:!0}),o}},max_tokens:{param:"max_tokens",required:!0},temperature:{param:"temperature",default:1,min:0,max:1},top_p:{param:"top_p",default:-1,min:-1},top_k:{param:"top_k",default:-1},stop:{param:"stop_sequences"},stream:{param:"stream",default:!1},user:{param:"metadata.user_id"}},an=(e,o)=>{var t,r;if(o!==200&&"error"in e)return{error:{message:(t=e.error)==null?void 0:t.message,type:(r=e.error)==null?void 0:r.type,param:null,code:null},provider:J};if("content"in e){let{input_tokens:n=0,output_tokens:s=0}=e==null?void 0:e.usage,i="";e.content.length&&e.content[0].type==="text"&&(i=e.content[0].text);let a=[];return e.content.forEach(p=>{p.type==="tool_use"&&a.push({id:p.id,type:"function",function:{name:p.name,arguments:JSON.stringify(p.input)}})}),{id:e.id,object:"chat_completion",created:Math.floor(Date.now()/1e3),model:e.model,provider:J,choices:[{message:{role:"assistant",content:i,tool_calls:a.length?a:void 0},index:0,logprobs:null,finish_reason:e.stop_reason}],usage:{prompt_tokens:n,completion_tokens:s,total_tokens:n+s}}}return he(e,J)},pn=(e,o)=>{var p,l,m,c;let t=e.trim();if(t.startsWith("event: ping")||t.startsWith("event: content_block_stop"))return;if(t.startsWith("event: message_stop"))return`data: [DONE]

`;t=t.replace(/^event: content_block_delta[\r\n]*/,""),t=t.replace(/^event: content_block_start[\r\n]*/,""),t=t.replace(/^event: message_delta[\r\n]*/,""),t=t.replace(/^event: message_start[\r\n]*/,""),t=t.replace(/^data: /,""),t=t.trim();let r=JSON.parse(t);if(r.type==="message_start")return`data: ${JSON.stringify({id:o,object:"chat.completion.chunk",created:Math.floor(Date.now()/1e3),model:"",provider:J,choices:[{delta:{role:"assistant",content:""},index:0,logprobs:null,finish_reason:null}]})}

`;if(r.type==="message_delta")return`data: ${JSON.stringify({id:o,object:"chat.completion.chunk",created:Math.floor(Date.now()/1e3),model:"",provider:J,choices:[{index:0,delta:{},finish_reason:(p=r.delta)==null?void 0:p.stop_reason}]})}

`;let n=[],s=r.type==="content_block_start"&&!!((l=r.content_block)!=null&&l.id),i=r.type==="content_block_delta"&&!!r.delta.partial_json,a=r.index;return s&&r.content_block?n.push({index:a,id:r.content_block.id,type:"function",function:{name:r.content_block.name,arguments:""}}):i&&n.push({index:a,function:{arguments:r.delta.partial_json}}),`data: ${JSON.stringify({id:o,object:"chat.completion.chunk",created:Math.floor(Date.now()/1e3),model:"",provider:J,choices:[{delta:{content:(m=r.delta)==null?void 0:m.text,tool_calls:n.length?n:void 0},index:0,logprobs:null,finish_reason:((c=r.delta)==null?void 0:c.stop_reason)??null}]})}

`};var Fa={chatComplete:sn,api:tn,responseTransforms:{chatComplete:an,"stream-chatComplete":pn}},ln=Fa;var ja={baseURL:"https://api.openai.com/v1",headers:e=>({Authorization:`Bearer ${e}`}),chatComplete:"/chat/completions"},mn=ja;var cn={model:{param:"model",required:!0,default:"gpt-4o-mini"},messages:{param:"messages",default:""},functions:{param:"functions"},function_call:{param:"function_call"},max_tokens:{param:"max_tokens",default:100,min:0},temperature:{param:"temperature",default:1,min:0,max:2},top_p:{param:"top_p",default:1,min:0,max:1},n:{param:"n",default:1},stream:{param:"stream",default:!1},stop:{param:"stop"},presence_penalty:{param:"presence_penalty",min:-2,max:2},frequency_penalty:{param:"frequency_penalty",min:-2,max:2},logit_bias:{param:"logit_bias"},user:{param:"user"},seed:{param:"seed"},tools:{param:"tools"},tool_choice:{param:"tool_choice"},response_format:{param:"response_format"},logprobs:{param:"logprobs",default:!1},top_logprobs:{param:"top_logprobs"}};var Ga={api:mn,chatComplete:cn},dn=Ga;var Ba={baseURL:"https://api.together.xyz",headers:e=>({Authorization:`Bearer ${e}`}),chatComplete:"/v1/chat/completions",complete:"/v1/completions",embed:"/v1/embeddings"},un=Ba;var fn={model:{param:"model",required:!0,default:"mistralai/Mistral-7B-Instruct-v0.1"},messages:{param:"messages",required:!0,default:""},max_tokens:{param:"max_tokens",required:!0,default:128,min:1},stop:{param:"stop"},temperature:{param:"temperature"},top_p:{param:"top_p"},top_k:{param:"top_k"},frequency_penalty:{param:"repetition_penalty"},stream:{param:"stream",default:!1},logprobs:{param:"logprobs"},tools:{param:"tools"},tool_choice:{param:"tool_choice"},response_format:{param:"response_format"}};var qa={chatComplete:fn,api:un},gn=qa;var Ha={baseURL:"https://api.groq.com/openai/v1",headers:e=>({Authorization:`Bearer ${e}`}),chatComplete:"/chat/completions"},hn=Ha;var yn={model:{param:"model",required:!0,default:"mixtral-8x7b-32768"},messages:{param:"messages",default:""},max_tokens:{param:"max_tokens",default:100,min:0},temperature:{param:"temperature",default:1,min:0,max:2},top_p:{param:"top_p",default:1,min:0,max:1},stream:{param:"stream",default:!1},stop:{param:"stop"},n:{param:"n",default:1,max:1,min:1}};var Ua={chatComplete:yn,api:hn},Cn=Ua;var Ja={baseURL:"https://generativelanguage.googleapis.com/v1beta",headers:()=>({"Content-Type":"application/json"}),getEndpoint:({endpoint:e,llmApiKey:o,model:t,stream:r})=>{let n=e;switch(r&&(n=`stream-${e}`),n){case"chatComplete":return`/models/${t}:generateContent?key=${o}`;case"stream-chatComplete":return`/models/${t}:streamGenerateContent?key=${o}`}}},bn=Ja;var go=e=>{let o={};return e.temperature&&(o.temperature=e.temperature),e.top_p&&(o.topP=e.top_p),e.top_k&&(o.topK=e.top_k),e.max_tokens&&(o.maxOutputTokens=e.max_tokens),e.stop&&(o.stopSequences=e.stop),o},Ka=e=>{switch(e){case"assistant":return"model";case"tool":return"function";case"system":return"user";default:return e}},Va=e=>{if(typeof e=="object"&&e.type==="function")return"ANY";if(typeof e=="string")switch(e){case"auto":return"AUTO";case"none":return"NONE";case"required":return"ANY"}},xn={model:{param:"model",required:!0,default:"gemini-pro"},messages:{param:"contents",default:"",transform:e=>{var r;let o=[],t;return(r=e.messages)==null||r.forEach(n=>{var p;let s=Ka(n.role),i=[];n.role==="assistant"&&n.tool_calls?n.tool_calls.forEach(l=>{i.push({functionCall:{name:l.function.name,args:JSON.parse(l.function.arguments)}})}):n.role==="tool"&&typeof n.content=="string"?i.push({functionResponse:{name:n.name??"lb-random-tool-name",response:{content:n.content}}}):n.content&&typeof n.content=="object"?n.content.forEach(l=>{var m;if(l.type==="text"&&i.push({text:l.text}),l.type==="image_url"){let{url:c}=l.image_url||{};if(!c)return;if(c.startsWith("data:")){let[d,f]=c.split(";base64,"),O=d.split(":")[1];i.push({inlineData:{mimeType:O,data:f}})}else c.startsWith("gs://")||c.startsWith("https://")||c.startsWith("http://")?i.push({fileData:{mimeType:rn(c),fileUri:c}}):i.push({inlineData:{mimeType:"image/jpeg",data:(m=l.image_url)==null?void 0:m.url}})}}):typeof n.content=="string"&&i.push({text:n.content}),t===s&&!((p=e.model)!=null&&p.includes("vision"))?o[o.length-1].parts.push(...i):o.push({role:s,parts:i}),t=s}),o}},temperature:{param:"generationConfig",transform:e=>go(e)},top_p:{param:"generationConfig",transform:e=>go(e)},top_k:{param:"generationConfig",transform:e=>go(e)},max_tokens:{param:"generationConfig",transform:e=>go(e)},stop:{param:"generationConfig",transform:e=>go(e)},tools:{param:"tools",default:"",transform:e=>{var t;let o=[];return(t=e.tools)==null||t.forEach(r=>{r.type==="function"&&o.push(r.function)}),[{functionDeclarations:o}]}},tool_choice:{param:"tool_config",default:"",transform:e=>{if(e.tool_choice){let o=[];typeof e.tool_choice=="object"&&e.tool_choice.type==="function"&&o.push(e.tool_choice.function.name);let t={function_calling_config:{mode:Va(e.tool_choice)}};return o.length>0&&(t.function_calling_config.allowed_function_names=o),t}}}},wn=(e,o)=>{var r,n;let t=Array.isArray(e)?(r=e.find(s=>"error"in s))==null?void 0:r.error:"error"in e?e.error:null;return o!==200&&t?Q({message:(t==null?void 0:t.message)??"",type:(t==null?void 0:t.status)??null,param:null,code:t!=null&&t.code?`${t.code}`:null},M):"candidates"in e?{id:crypto.randomUUID(),object:"chat_completion",created:Math.floor(Date.now()/1e3),model:"Unknown",provider:M,choices:((n=e.candidates)==null?void 0:n.map(s=>{var a,p,l,m,c;if(s.finishReason==="MAX_TOKENS"&&!s.content)throw Error("The response exceeded your Max Tokens limit parameter. Increase the limit or change the prompt accordingly.");let i={role:"assistant",content:""};return(p=(a=s.content)==null?void 0:a.parts[0])!=null&&p.text?i={role:"assistant",content:(l=s.content.parts[0])==null?void 0:l.text}:(c=(m=s.content)==null?void 0:m.parts[0])!=null&&c.functionCall&&(i={role:"assistant",content:null,tool_calls:s.content.parts.map(d=>{if(d.functionCall)return{id:crypto.randomUUID(),type:"function",function:{name:d.functionCall.name,arguments:JSON.stringify(d.functionCall.args)}}})}),{message:i,index:s.index,finish_reason:s.finishReason}}))??[],usage:{prompt_tokens:e.usageMetadata.promptTokenCount,completion_tokens:e.usageMetadata.candidatesTokenCount,total_tokens:e.usageMetadata.totalTokenCount}}:he(e,M)},Pn=(e,o)=>{var n;let t=e.trim();if(t.startsWith("[")&&(t=t.slice(1)),t.endsWith(",")&&(t=t.slice(0,t.length-1)),t.endsWith("]")&&(t=t.slice(0,t.length-2)),t=t.replace(/^data: /,""),t=t.trim(),t==="[DONE]")return`data: ${t}

`;let r=JSON.parse(t);return`data: ${JSON.stringify({id:o,object:"chat.completion.chunk",created:Math.floor(Date.now()/1e3),model:"",provider:"google",choices:((n=r.candidates)==null?void 0:n.map(s=>{var a,p,l;let i={role:"assistant",content:""};return(a=s.content.parts[0])!=null&&a.text?i={role:"assistant",content:(p=s.content.parts[0])==null?void 0:p.text}:(l=s.content.parts[0])!=null&&l.functionCall&&(i={role:"assistant",tool_calls:s.content.parts.map((m,c)=>{if(m.functionCall)return{index:c,id:crypto.randomUUID(),type:"function",function:{name:m.functionCall.name,arguments:JSON.stringify(m.functionCall.args)}}})}),{delta:i,index:s.index,finish_reason:s.finishReason}}))??[]})}

`};var za={api:bn,chatComplete:xn,responseTransforms:{chatComplete:wn,"stream-chatComplete":Pn}},vn=za;var Xa={baseURL:"https://api.cohere.ai/v1",headers:e=>({Authorization:`Bearer ${e}`}),chatComplete:"/chat"},En=Xa;var Sn={model:{param:"model",default:"command-r",required:!0},messages:[{param:"message",required:!0,transform:e=>{let o="";if(e.messages){let t=e.messages,r=t[t.length-1];typeof r.content=="string"&&(o=r.content)}return o}},{param:"chat_history",transform:e=>{let o=[];if(e.messages){let t=e.messages;if(t.length===1)return o;t.pop(),t.forEach(r=>{if(typeof r.content=="string"){let n="USER";r.role==="assistant"?n="CHATBOT":r.role==="system"&&(n="SYSTEM"),o.push({role:n,message:r.content})}})}return o}}],max_tokens:{param:"max_tokens",default:50,min:1},temperature:{param:"temperature",default:.3,min:0,max:5},top_p:{param:"p",default:.75,min:0,max:1},top_k:{param:"k",default:0,max:500},frequency_penalty:{param:"frequency_penalty",default:0,min:0,max:1},stop:{param:"stop_sequences"},stream:{param:"stream",default:!1},prompt_truncation:{param:"prompt_truncation",default:"OFF",required:!0}},Mn=(e,o)=>{var n;if(o!==200)return Q({message:e.message||"",type:null,param:null,code:null},L);let{input_tokens:t=0,output_tokens:r=0}=(n=e.meta)==null?void 0:n.tokens;return{id:e.response_id,object:"chat_completion",created:Math.floor(Date.now()/1e3),model:"Unknown",provider:L,choices:[{message:{role:"assistant",content:e.text},index:0,finish_reason:e.finish_reason}],usage:{prompt_tokens:t,completion_tokens:r,total_tokens:t+r}}},An=(e,o)=>{var n,s,i,a,p,l;let t=e.trim();t=t.replace(/^data: /,""),t=t.trim();let r=JSON.parse(t);return r.is_finished?"":`data: ${JSON.stringify({id:r.id??o,object:"chat.completion.chunk",created:Math.floor(Date.now()/1e3),model:"",provider:L,choices:[{delta:{content:((i=(s=(n=r.response)==null?void 0:n.generations)==null?void 0:s[0])==null?void 0:i.text)??r.text},index:r.index??0,logprobs:null,finish_reason:((l=(p=(a=r.response)==null?void 0:a.generations)==null?void 0:p[0])==null?void 0:l.finish_reason)??null}]})}

`};var Ya={chatComplete:Sn,api:En,responseTransforms:{chatComplete:Mn,"stream-chatComplete":An}},Tn=Ya;var Wa={baseURL:"https://api.fireworks.ai/inference/v1",headers:({llmApiKey:e})=>({Authorization:`Bearer ${e}`,Accept:"application/json"}),getEndpoint:({endpoint:e})=>{switch(e){case"chatComplete":return"/chat/completions";default:return""}}},In=Wa;var _n={model:{param:"model",required:!0},messages:{param:"messages",required:!0,default:[]},tools:{param:"tools"},max_tokens:{param:"max_tokens",default:200,min:1},prompt_truncate_len:{param:"prompt_truncate_len",default:1500},temperature:{param:"temperature",default:1,min:0,max:2},top_p:{param:"top_p",default:1,min:0,max:1},top_k:{param:"top_k",min:1,max:128},frequency_penalty:{param:"frequency_penalty",min:-2,max:2},presence_penalty:{param:"presence_penalty",min:-2,max:2},n:{param:"n",default:1,min:1,max:128},stop:{param:"stop"},response_format:{param:"response_format"},stream:{param:"stream",default:!1},context_length_exceeded_behavior:{param:"context_length_exceeded_behavior"},user:{param:"user"}},Qa=e=>"fault"in e?Q({message:e.fault.faultstring,type:null,param:null,code:e.fault.detail.errorcode},v):"detail"in e?Q({message:e.detail,type:null,param:null,code:null},v):Q({message:e.error,type:null,param:null,code:null},v),kn=(e,o)=>{var t,r,n;return o!==200?Qa(e):"choices"in e?{id:e.id,object:e.object,created:e.created,model:e.model,provider:v,choices:e.choices.map(s=>({index:s.index,message:{role:s.message.role,content:s.message.content,tool_calls:s.message.tool_calls},finish_reason:s.finish_reason})),usage:{prompt_tokens:(t=e.usage)==null?void 0:t.prompt_tokens,completion_tokens:(r=e.usage)==null?void 0:r.completion_tokens,total_tokens:(n=e.usage)==null?void 0:n.total_tokens}}:he(e,v)},Rn=e=>{let o=e.trim();if(o=o.replace(/^data: /,""),o=o.trim(),o==="[DONE]")return`data: ${o}

`;let t=JSON.parse(o);return`data: ${JSON.stringify({id:t.id,object:t.object,created:t.created,model:t.model,provider:v,choices:[{index:t.choices[0].index,delta:t.choices[0].delta,finish_reason:t.choices[0].finish_reason}],...t.usage?{usage:t.usage}:{}})}

`};var Za={chatComplete:_n,api:In,responseTransforms:{chatComplete:kn,"stream-chatComplete":Rn}},On=Za;var ep={baseURL:"https://api.perplexity.ai",headers:e=>({Authorization:`Bearer ${e}`,"content-type":"application/json",accept:"application/json"}),chatComplete:"/chat/completions"},Dn=ep;var $n={model:{param:"model",required:!0,default:"llama-3.1-sonar-small-128k-chat"},messages:{param:"messages",required:!0,default:[]},max_tokens:{param:"max_tokens",required:!0,min:1},temperature:{param:"temperature",min:0,max:2},top_p:{param:"top_p",min:0,max:1},top_k:{param:"top_k",min:0,max:2048},stream:{param:"stream",default:!1},presence_penalty:{param:"presence_penalty",min:-2,max:2},frequency_penalty:{param:"repetition_penalty"},n:{param:"n",max:1,min:1}},Ln=(e,o)=>{var t;return"error"in e?Q({message:e.error.message,type:e.error.type,param:null,code:e.error.code.toString()},I):"choices"in e?{id:e.id,object:e.object,created:e.created,model:e.model,provider:I,choices:[{message:{role:"assistant",content:(t=e.choices[0])==null?void 0:t.message.content},index:0,logprobs:null,finish_reason:""}],usage:{prompt_tokens:e.usage.prompt_tokens,completion_tokens:e.usage.completion_tokens,total_tokens:e.usage.total_tokens}}:he(e,I)},Nn=e=>{var n,s,i;let o=e.trim();o=o.replace(/^data: /,""),o=o.trim();let t=JSON.parse(o);return`data: ${JSON.stringify({id:t.id,object:t.object,created:Math.floor(Date.now()/1e3),model:t.model,provider:I,choices:[{delta:{role:(n=t.choices[0])==null?void 0:n.delta.role,content:(s=t.choices[0])==null?void 0:s.delta.content},index:0,finish_reason:(i=t.choices[0])==null?void 0:i.finish_reason}]})}

`};var op={chatComplete:$n,api:Dn,responseTransforms:{chatComplete:Ln,"stream-chatComplete":Nn}},Fn=op;var tp={baseURL:"https://api.mistral.ai/v1",headers:e=>({Authorization:`Bearer ${e}`}),chatComplete:"/chat/completions"},jn=tp;var Gn={model:{param:"model",required:!0,default:"mistral-large-latest"},messages:{param:"messages",default:[]},temperature:{param:"temperature",default:.7,min:0,max:1},top_p:{param:"top_p",default:1,min:0,max:1},max_tokens:{param:"max_tokens",default:null,min:1},stream:{param:"stream",default:!1},seed:{param:"random_seed",default:null},safe_prompt:{param:"safe_prompt",default:!1},safe_mode:{param:"safe_prompt",default:!1}},Bn=(e,o)=>{var t,r,n;return"message"in e&&o!==200?Q({message:e.message,type:e.type,param:e.param,code:e.code},pe):"choices"in e?{id:e.id,object:e.object,created:e.created,model:e.model,provider:pe,choices:e.choices.map(s=>({index:s.index,message:{role:s.message.role,content:s.message.content},finish_reason:s.finish_reason})),usage:{prompt_tokens:(t=e.usage)==null?void 0:t.prompt_tokens,completion_tokens:(r=e.usage)==null?void 0:r.completion_tokens,total_tokens:(n=e.usage)==null?void 0:n.total_tokens}}:he(e,pe)},qn=e=>{let o=e.trim();if(o=o.replace(/^data: /,""),o=o.trim(),o==="[DONE]")return`data: ${o}

`;let t=JSON.parse(o);return`data: ${JSON.stringify({id:t.id,object:t.object,created:t.created,model:t.model,provider:pe,choices:[{index:t.choices[0].index,delta:t.choices[0].delta,finish_reason:t.choices[0].finish_reason}]})}

`};var rp={chatComplete:Gn,api:jn,responseTransforms:{chatComplete:Bn,"stream-chatComplete":qn}},Hn=rp;var np={headers:()=>({}),getBaseURL:({providerOptions:e})=>e.customHost??"http://localhost:11434",chatComplete:"/v1/chat/completions"},Un=np;var Jn={model:{param:"model",required:!0,default:"llama2"},messages:{param:"messages",default:""},frequency_penalty:{param:"frequency_penalty",min:-2,max:2},presence_penalty:{param:"presence_penalty",min:-2,max:2},response_format:{param:"response_format"},seed:{param:"seed"},stop:{param:"stop"},stream:{param:"stream",default:!1},temperature:{param:"temperature",default:1,min:0,max:2},top_p:{param:"top_p",default:1,min:0,max:1},max_tokens:{param:"max_tokens",default:100,min:0}},Kn=(e,o)=>{var t,r;return o!==200?Q({message:(t=e.error)==null?void 0:t.message,type:(r=e.error)==null?void 0:r.type,param:null,code:null},U):{id:e.id,object:e.object,created:e.created,model:e.model,provider:U,choices:e.choices,usage:e.usage}},Vn=e=>{let o=e.trim();if(o=o.replace(/^data: /,""),o=o.trim(),o==="[DONE]")return`data: ${o}

`;let t=JSON.parse(o);return`data: ${JSON.stringify({id:t.id,object:t.object,created:t.created,model:t.model,provider:U,choices:t.choices})}

`};var sp={api:Un,chatComplete:Jn,responseTransforms:{chatComplete:Kn,"stream-chatComplete":Vn}},zn=sp;var ip={[S]:dn,[G]:ln,[T]:gn,[j]:Cn,[M]:vn,[L]:Tn,[v]:On,[I]:Fn,[pe]:Hn,[U]:zn},Re=ip;function Xn(e,o,t){let r=o.split("."),n=e;for(let s=0;s<r.length-1;s++)n[r[s]]||(n[r[s]]={}),n=n[r[s]];n[r[r.length-1]]=t}var ap=({provider:e,params:o,fn:t})=>{let r=Re[e];if(r.getConfig?r=r.getConfig(o)[t]:r=r[t],!r)throw new Error("Unsupported provider");let n={};for(let s in r){let i=r[s];Array.isArray(i)||(i=[i]);for(let a of i)if(s in o){let p=o[s];a.transform&&(p=a.transform(o)),p==="default"&&a&&a.default!==void 0&&(p=a.default),typeof p=="number"&&a&&a.min!==void 0&&p<a.min?p=a.min:typeof p=="number"&&a&&a.max!==void 0&&p>a.max&&(p=a.max),Xn(n,a==null?void 0:a.param,p)}else a&&a.required&&a.default!==void 0&&Xn(n,a.param,a.default)}return n},Z=ap;async function Yn({response:e,responseTransformer:o}){if(e.status===Yr)return e;let t=await e.json();return u("original provider response",t),o&&(t=o(t,e.status,e.headers)),t}async function Wn(e,o,t,r){let n=pp(o,r),s=Date.now().toString();if(!e.body)throw new Error("Response format is invalid. Body not found");let{readable:i,writable:a}=new TransformStream,p=a.getWriter(),l=e.body.getReader(),m=o===Xt,c=new TextEncoder;return(async()=>{for await(let d of lp(l,n,t,m,s))await p.write(c.encode(d));p.close()})(),[M,L,zt].includes(o)&&t,i}var pp=(e,o)=>{let t=`

`;return e===L&&(t=`
`),e===M&&(t=`\r
`),e===I&&(t=`\r
\r
`),e===Vt&&(t=`\r
\r
`),t};async function*lp(e,o,t,r,n){let s="",i=new TextDecoder,a=!0;for(;;){let{done:p,value:l}=await e.read();if(p){s.length>0&&(t?yield t(s,n):yield s);break}for(s+=i.decode(l,{stream:!0});s.split(o).length>1;){let m=s.split(o),c=m.pop()??"";for(let d of m)if(d.length>0)if(a?(a=!1,await new Promise(f=>setTimeout(f,25))):r&&await new Promise(f=>setTimeout(f,1)),t){let f=t(d,n);f!==void 0&&(yield f)}else yield d+o;s=c}}}function Qn({response:e,streamingMode:o,provider:t,responseTransformer:r,requestURL:n,modelParams:s}){var i;try{let a,p=Re[t],l=(i=Re[t])==null?void 0:i.responseTransforms;return p.getConfig&&(l=p.getConfig(s).responseTransforms),r&&o&&e.status===200?a=l==null?void 0:l[`stream-${r}`]:r&&(a=l==null?void 0:l[r]),u("transforming provider response using",a?`${t}${r}ResponseTransform`:"No transformer found"),o&&e.status===200?Wn(e,t,a,n):Yn({response:e,responseTransformer:a})}catch(a){throw console.error("An error occurred in responseHandler:",a),a}}function Ke({providerConfigMappedHeaders:e,method:o="POST"}){let t={"content-type":"application/json"},r={...e};r={...t,...r};let n={method:o,headers:r};if(o==="GET"&&n.headers){let s=n.headers;delete s["content-type"]}return n}async function se({providerOptions:e,inputParams:o,endpoint:t,transformedRequestParams:r}){let n={...o},s=!!n.stream,i=e.provider??"",a=Re[i].api,p="",l,m;if(i===G&&a.baseURL){let f=a.headers({llmApiKey:e.llmApiKey,endpoint:t});m=Ke({providerConfigMappedHeaders:f,method:"POST"}),p=p||a.baseURL,l=a[t]||""}else i===M&&a.baseURL&&a.getEndpoint?(m=Ke({providerConfigMappedHeaders:a.headers(),method:"POST"}),p=p||a.baseURL,l=a.getEndpoint({endpoint:t,llmApiKey:e.llmApiKey,model:r.model,stream:n.stream})):i===v&&a.baseURL&&a.getEndpoint?(m=Ke({providerConfigMappedHeaders:a.headers({llmApiKey:e.llmApiKey}),method:"POST"}),p=p||a.baseURL,l=a.getEndpoint({endpoint:t})):i===U&&a.getBaseURL?(m=Ke({providerConfigMappedHeaders:a.headers(),method:"POST"}),p=a.getBaseURL({providerOptions:e}),l=a[t]||"",u("Ollama request",{baseUrl:p,providerEndpoint:l,transformedRequestParams:r})):(m=Ke({providerConfigMappedHeaders:a.headers(e.llmApiKey),method:"POST"}),p=p||a.baseURL||"",l=a[t]||"");let c=`${p}${l}`;m.body=JSON.stringify(r);let d;try{d=await fetch(c,m);let f=await Qn({response:d,streamingMode:s,provider:i,responseTransformer:t,requestURL:c,modelParams:n});if(u("Transformed provider response",f),!d.ok)throw f.error;return f}catch(f){throw console.error(f),new E({code:"INTERNAL_SERVER_ERROR",message:f.message})}}function vt({currentModel:e,jsonMode:o}){let t=Yt.includes(e);return!!(o&&t)}function _({error:e,provider:o}){throw u(`Error call-${o}.ts:`,e),new E({code:"BAD_REQUEST",message:`Error from ${o}: ${e.message}`})}function Ve(e,o){vt({currentModel:e.model,jsonMode:o.json||!1})&&(e.response_format={type:"json_object"})}function Zn(e,o){let t=o.model.split(":")[1];vt({currentModel:t,jsonMode:o.json||!1})&&(e.generationConfig={...e.generationConfig,responseMimeType:"application/json"})}function Uo(e){let t={openai:q,anthropic:J,together:N,google:ke,groq:ge,cohere:fo,fireworks:Se,perplexity:Me,ollama:zr,xai:Ho}[e.toLowerCase()];if(!t)throw new Error(`Unknown provider: ${e}`);return t}function es({provider:e,modelName:o}){return Pt[e].filter(n=>n.toolSupport).flatMap(n=>n.id).includes(o)}function os({provider:e,modelName:o}){var n,s;let r=Pt[e].filter(i=>i.toolSupport).find(i=>i.id===o);return r?{hasToolChoiceSupport:(n=r.toolSupport)==null?void 0:n.toolChoice,hasParallelToolCallSupport:(s=r.toolSupport)==null?void 0:s.parallelToolCalls}:{hasParallelToolCallSupport:!1,hasToolChoiceSupport:!1}}function ye(e,o){if(!o.tools.length)return;let[t,r]=o.model.split(":"),n=Uo(t);if(es({modelName:r,provider:n})){let{hasParallelToolCallSupport:i,hasToolChoiceSupport:a}=os({modelName:r,provider:n});i&&(e.parallel_tool_calls=o.parallel_tool_calls),a&&(e.tool_choice=o.tool_choice),e.tools=o.tools}}async function ts({pipe:e,messages:o,llmApiKey:t,stream:r}){try{let n=mp(e,r,o);ye(n,e);let s=Z({provider:G,params:n,fn:"chatComplete"});return u("Anthropic request params",s),await se({providerOptions:{provider:G,llmApiKey:t},inputParams:n,endpoint:"chatComplete",transformedRequestParams:s})}catch(n){_({error:n,provider:G})}}function mp(e,o,t){let r=e.model.split(":")[1],{top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}=e;return{messages:t,stream:o,model:r,top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}}async function rs({pipe:e,messages:o,llmApiKey:t,stream:r}){try{let n=cp(e,r,o),s=Z({provider:L,params:n,fn:"chatComplete"});return u("Cohere request params",s),await se({providerOptions:{provider:L,llmApiKey:t},inputParams:n,endpoint:"chatComplete",transformedRequestParams:s})}catch(n){_({error:n,provider:L})}}function cp(e,o,t){let r=e.model.split(":")[1],{top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}=e;return{messages:t,stream:o,model:r,top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}}async function ns({pipe:e,messages:o,llmApiKey:t,stream:r}){try{let n=dp(e,r,o),s=Z({provider:v,params:n,fn:"chatComplete"});return u("Fireworks request params",s),(n==null?void 0:n.model)==="llama-v3p1-405b-instruct"&&delete s.stop,await se({providerOptions:{provider:v,llmApiKey:t},inputParams:n,endpoint:"chatComplete",transformedRequestParams:s})}catch(n){_({error:n,provider:v})}}function dp(e,o,t){let r=e.model.split(":")[1],n=r==="yi-large"?"accounts/yi-01-ai/models/yi-large":`accounts/fireworks/models/${r}`,{top_p:s,max_tokens:i,temperature:a,presence_penalty:p,frequency_penalty:l,stop:m}=e;return{messages:t,stream:o,model:n,top_p:s,max_tokens:i,temperature:a,presence_penalty:p,frequency_penalty:l,stop:m}}async function ss({pipe:e,messages:o,llmApiKey:t,stream:r}){try{let n=up(e,r,o);ye(n,e);let s=Z({provider:M,params:n,fn:"chatComplete"});return Zn(s,e),u("Google request params",s),await se({providerOptions:{provider:M,llmApiKey:t},inputParams:n,endpoint:"chatComplete",transformedRequestParams:s})}catch(n){fp(n),_({error:n,provider:M})}}function up(e,o,t){let r=e.model.split(":")[1],{top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}=e;return{messages:t,stream:o,model:r,top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}}function fp(e){e.message.includes("models/gemini-1.5-pro-latest is not found for API version v1")&&(e.message="You don't have access to gemini-1.5-pro-latest by Google Cloud AI. Contact Google support."),e.message.includes("models/gemini-1.5-flash is not found for API version v1")&&(e.message="You don't have access to gemini-1.5-flash by Google Cloud AI. Contact Google support.")}import gp from"openai";async function is({pipe:e,messages:o,llmApiKey:t,stream:r}){try{let n=hp(e,r,o),s=new gp({apiKey:t,baseURL:"https://api.groq.com/openai/v1"});Ve(n,e);let i=Z({provider:j,params:n,fn:"chatComplete"});return u("Groq request params",i),await s.chat.completions.create(i)}catch(n){_({error:n,provider:j})}}function hp(e,o,t){let r=e.model.split(":")[1],{top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}=e;return{messages:t,stream:o,model:r,top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}}async function as({pipe:e,messages:o,llmApiKey:t,stream:r}){try{let n=yp(e,r,o),s=Z({provider:U,params:n,fn:"chatComplete"});return u("ollama request params",s),await se({providerOptions:{provider:U,llmApiKey:t},inputParams:n,endpoint:"chatComplete",transformedRequestParams:s})}catch(n){_({error:n,provider:U})}}function yp(e,o,t){let r=e.model.split(":")[1],{top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}=e;return{messages:t,stream:o,model:r,top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}}import Cp from"openai";import"openai";async function ps({openai:e,prompt:o}){let t="";if(o.messages&&o.messages.length>0)for(let s of o.messages)t+=s.content+`
`;if(o.variables&&o.variables.length>0)for(let s of o.variables)t+=`${s.name}: ${s.value}
`;let r=await e.moderations.create({input:t}),n=r==null?void 0:r.results[0];if(n.flagged){let i=Object.entries(n.categories).filter(([,a])=>a===!0).map(([a])=>a.replace("/"," or ")).join(", ");return{flagged:n.flagged,reason:`Content flagged by OpenAI moderation endpoint due to: ${i}`}}return{flagged:n.flagged,reason:"Content passed OpenAI moderation successfully"}}async function ls({pipe:e,stream:o,llmApiKey:t,messages:r}){try{bp(e,r);let n=new Cp({apiKey:t});await xp(n,r,e.moderate);let s=wp(e,o,r);return ye(s,e),Ve(s,e),u("modelParams",s),await n.chat.completions.create(s)}catch(n){_({error:n,provider:S})}}function bp(e,o){if(!e||!e.model||!o||o.length===0)throw new E({code:"BAD_REQUEST",message:"Invalid input: pipe or messages are missing or empty"})}async function xp(e,o,t=!0){if(t){let{flagged:r,reason:n}=await ps({openai:e,prompt:{messages:o,variables:[]}});if(r)throw new E({code:"BAD_REQUEST",message:n})}}function wp(e,o,t){let r=e.model.split(":")[1],{top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}=e;return{messages:t,stream:o,model:r||"gpt-4o-mini",top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}}async function ms({pipe:e,messages:o,llmApiKey:t,stream:r}){try{let n=Pp(e,r,o),s=Z({provider:I,params:n,fn:"chatComplete"});return u("Perplexity request params",s),await se({providerOptions:{provider:I,llmApiKey:t},inputParams:n,endpoint:"chatComplete",transformedRequestParams:s})}catch(n){_({error:n,provider:I})}}function Pp(e,o,t){let r=e.model.split(":")[1],{top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}=e;return{messages:t,stream:o,model:r,top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}}import vp from"openai";async function cs({pipe:e,messages:o,llmApiKey:t,stream:r}){try{let n=Ep(e,r,o),s=new vp({apiKey:t,baseURL:"https://api.together.xyz/v1"});return delete n.stop,Ve(n,e),ye(n,e),u("modelParams",n),await s.chat.completions.create(n)}catch(n){_({error:n,provider:j})}}function Ep(e,o,t){let r=e.model.split(":")[1],{top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}=e;return{messages:t,stream:o,model:r,top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}}import Sp from"openai";async function ds({pipe:e,stream:o,llmApiKey:t,messages:r}){try{let n=Mp(e,o,r),s=new Sp({apiKey:t,baseURL:"https://api.x.ai/v1"});return ye(n,e),u("modelParams",n),await s.chat.completions.create(n)}catch(n){_({error:n,provider:Fe})}}function Mp(e,o,t){let r=e.model.split(":")[1],{top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}=e;return{messages:t,stream:o,model:r,top_p:n,max_tokens:s,temperature:i,presence_penalty:a,frequency_penalty:p,stop:l}}async function us({pipe:e,stream:o,messages:t,llmApiKey:r,variables:n}){try{let s=e.model.split(":")[0],i=Uo(s),a=e.memory.map(m=>m.name),p=await gr({messages:t,memoryNames:a});if(t=on({pipe:e,messages:t,similarChunks:p,variables:n}),u("Messages for LLM",t),i===S)return u("OPEN_AI","\u2705"),await ls({pipe:e,stream:o,messages:t,llmApiKey:r});if(i===G)return u("ANTHROPIC","\u2705"),await ts({pipe:e,messages:t,llmApiKey:r,stream:o});if(i===T)return u("TOGETHER_AI","\u2705"),await cs({pipe:e,messages:t,llmApiKey:r,stream:o});if(i===j)return u("GROQ","\u2705"),await is({pipe:e,messages:t,llmApiKey:r,stream:o});if(i===M)return u("GOOGLE","\u2705"),await ss({pipe:e,messages:t,llmApiKey:r,stream:o});if(i===Fe)return u("XAI","\u2705"),await ds({pipe:e,messages:t,llmApiKey:r,stream:o});if(i===L)return u("COHERE","\u2705"),await rs({pipe:e,messages:t,llmApiKey:r,stream:o});if(i===v)return u("FIREWORKS_AI","\u2705"),await ns({pipe:e,messages:t,llmApiKey:r,stream:o});if(i===I)return u("PERPLEXITY","\u2705"),await ms({pipe:e,messages:t,llmApiKey:r,stream:o});if(i===U)return u("OLLAMA","\u2705"),await as({pipe:e,messages:t,llmApiKey:r,stream:o});throw new E({status:400,code:"BAD_REQUEST",message:`Invalid model provider: ${i}`})}catch(s){throw u("Error call-llm.ts:",s),s.status===429?new E({status:429,code:"RATE_LIMITED",message:`Rate limited by the model provider. Please try again later. ${s.message}`}):new E({status:s.status,code:s.code||"INTERNAL_SERVER_ERROR",message:s.message?s.message:"Error calling the model provider."})}}var fs=async({c:e,response:o,headers:t})=>{try{if(o instanceof ReadableStream){let[r]=o.tee();return new Response(r,{headers:{"content-type":"text/event-stream",...t}})}else{let r=new ReadableStream({async start(n){let s=new TextEncoder;try{for await(let i of o){let a=JSON.stringify(i);n.enqueue(s.encode(`data: ${a}

`))}}catch(i){console.error("Error processing stream:",i),n.error(i)}finally{n.enqueue(s.encode(`data: [DONE]

`)),n.close()}}});return new Response(r,{headers:{"content-type":"text/event-stream",...t}})}}catch(r){throw console.error("Error in handleStreamingResponse:",r),new E({code:"INTERNAL_SERVER_ERROR",message:`Error while streaming: ${r}`})}};import"hono";import{z as R}from"zod";var Et=R.object({role:R.enum(["system","user","assistant","function","tool"]),content:R.string().nullable(),tool_call_id:R.string().optional(),name:R.string().optional(),tool_calls:R.array(R.object({id:R.string(),type:R.string(),function:R.record(R.unknown())})).optional()}).refine(({content:e,role:o,tool_calls:t})=>!(e===null&&o!=="assistant"&&!t),{message:"Message content cannot be empty."}),Ap=R.object({name:R.string(),value:R.string()}),St=R.array(Ap).default([]),Tp=/^[a-zA-Z_$][a-zA-Z0-9_$]*$/,gs=R.object({type:R.enum(["function"]).default("function"),function:R.object({name:R.string().refine(e=>Tp.test(e))})}).optional();import{z as Oe}from"zod";var hs=Oe.object({type:Oe.literal("function"),function:Oe.object({name:Oe.string(),description:Oe.string().optional(),parameters:Oe.record(Oe.any()).optional()})});import{z as C}from"zod";var Ip=C.object({name:C.string(),description:C.string(),status:C.enum(["public","private"]),model:C.string(),stream:C.boolean(),json:C.boolean(),store:C.boolean(),moderate:C.boolean(),top_p:C.number(),max_tokens:C.number(),temperature:C.number(),presence_penalty:C.number(),frequency_penalty:C.number(),stop:C.array(C.string()),tool_choice:C.union([C.enum(["auto","required","none"]),gs]).default("auto"),parallel_tool_calls:C.boolean(),messages:C.array(Et),variables:St,tools:C.array(hs).default([]),memory:C.array(C.object({name:C.string().trim().min(1)})).default([])}),_p=C.object({pipe:Ip,stream:C.boolean(),messages:C.array(Et),llmApiKey:C.string(),variables:St.optional()}),kp=e=>{let o=_p.safeParse(e);if(!o.success)throw new Je({code:"BAD_REQUEST",validationResult:o,customMessage:"Invalid request body"});return o.data},Rp=(e,o,t)=>{var n,s,i,a,p;let r=o.stream;if(!r&&((n=t==null?void 0:t.choices)==null?void 0:n.length)>0){let l=((i=(s=t.choices[0])==null?void 0:s.message)==null?void 0:i.content)??"",m=((p=(a=t.choices[0])==null?void 0:a.message)==null?void 0:p.tool_calls)??[],c=m.length>0;return ue("tool",c,"Tool calls found"),ue("tool.calls",m),ue("pipe.completion",l,"Pipe completion"),ue("pipe.response",t,"type: (non-streaming)"),e.json({completion:l,...t})}return r?(ue("pipe.response",t,"type: (streaming)"),fs({response:t,headers:{},c:e})):e.json({body:o})},Op=(e,o)=>{if(o instanceof Je)throw o;let t=o instanceof Error?o.message:"Unexpected error occurred in /pipe/v1/run";throw u("Error /pipe/v1/run.ts:",o),new E({status:o instanceof E?o.status:500,code:o instanceof E?o.code:"INTERNAL_SERVER_ERROR",message:t,docs:o instanceof E?o.docs:void 0})},Dp=async e=>{try{let o=await e.req.json(),t=o.llmApiKey||"",r=new Array(45).fill("*").join(""),n=t.length?t.slice(0,8)+r:"",s={...o,llmApiKey:n};ue("pipe.request",s,"Pipe Request Body");let i=kp(o),{pipe:a,messages:p,llmApiKey:l,stream:m,variables:c}=i,d=a.model,f=await us({pipe:{...a,model:d},messages:p,llmApiKey:l,stream:m,variables:c});return Rp(e,i,f)}catch(o){return Op(e,o)}},ys=e=>{e.post("/v1/pipes/run",Dp)};async function Cs(){let e=new Fp;e.use(Gp()),e.use("*",Hr),e.use(jp()),e.use(Ur()),e.use(Jr()),e.onError((t,r)=>qr(t,r)),Kr(e),ys(e);let o=9e3;try{Ce.intro(h({text:"DEV",sub:"BaseAI dev server"}));let t=Lp({fetch:e.fetch,port:o});t.on("error",r=>{r.code==="EADDRINUSE"?(Ce.log.error(Jo.red(`Error: Port ${o} is already in use.`)),Ce.log.info("Please close the other application using 9000 port. And try again."),process.exit(1)):(console.error("Unexpected server error:",r),process.exit(1))}),t.on("listening",()=>{$p(`BaseAI server running on: ${Jo.green(`http://localhost:${o}`)}`),console.log(`When needed you can press ${Jo.cyan("Ctrl + C")} to shut down.`)}),process.on("SIGINT",()=>{let r=Ce.spinner();r.start("Shutting down server"),t.close(()=>{r.stop("Shutting down the server \u2026"),Ce.outro(`${Jo.green(Np.tick)} BaseAI server has been gracefully shut down.`),process.exit(0)})})}catch(t){Ce.outro(`Error: Unable to start server. ${t.message}`),process.exit(1)}}import{detect as Bp}from"@antfu/ni";import*as b from"@clack/prompts";import{execa as At}from"execa";import ce from"fs/promises";import ze from"path";import Mt from"picocolors";function De({errorMessage:e,warningMessage:o}){b.log.error(`Setup failed: ${e}`),b.log.warn(o),b.cancel("Setup aborted."),process.exit(1)}async function qp({calledAsCommand:e}){e&&b.intro(h({text:"SETUP",sub:"Setting up BaseAI"}))}async function Hp(){if(!await Tt("package.json")){let o=await b.confirm({message:`No ${Mt.red("package.json")} found. Would you like to create one using ${Mt.cyan(Mt.bold("npm init -y"))}?`});b.isCancel(o)&&(b.cancel("Operation cancelled."),process.exit(0)),o||De({errorMessage:"Cannot proceed without a package.json file.",warningMessage:"Run the command in a directory with a package.json file or allow the setup to create one."});try{await At("npm",["init","-y"]),b.log.success("Created package.json file.")}catch(t){De({errorMessage:`Failed to create package.json: ${t instanceof Error?t.message:String(t)}`,warningMessage:"Ensure you have permission to create files in this directory and npm is installed."})}}}async function Up(e){let o=await Bp({programmatic:!0,cwd:e});return o==="yarn@berry"?"yarn":o==="pnpm@6"?"pnpm":o==="bun"?"bun":o??"npm"}async function ws(){try{let e=JSON.parse(await ce.readFile("package.json","utf-8")),o="baseai"in(e.devDependencies||{}),t="@baseai/core"in(e.dependencies||{});return o&&t}catch{return!1}}async function Jp(e){if(await ws())return;let t=b.spinner();t.start("Installing BaseAI");let r={npm:"install",yarn:"add",pnpm:"add",bun:"add"}[e];try{await At(e,[r,"@baseai/core"]),await At(e,[r,"baseai","--save-dev"]),t.stop("BaseAI installed successfully.")}catch(n){De({errorMessage:`BaseAI installation failed: ${n instanceof Error?n.message:String(n)}`,warningMessage:"Ensure you have an active internet connection and the necessary permissions to install packages."})}}async function bs(e){try{return await ce.access(e),!1}catch{return await ce.mkdir(e,{recursive:!0}),!0}}async function Tt(e){try{return await ce.access(e),!0}catch{return!1}}async function Kp(){let e=ze.join(process.cwd(),"baseai"),o=ze.join(process.cwd(),".baseai");try{let t=await bs(e),r=await bs(o);t&&r&&b.log.success("Added `baseai` directory to your project.")}catch(t){De({errorMessage:`Error setting up directories: ${t instanceof Error?t.message:String(t)}`,warningMessage:"Ensure you have permission to create directories in this location."})}}async function Vp(){let e=ze.join(process.cwd(),"baseai","baseai.config.ts");if(!await Tt(e)){let t=`
import type {BaseAIConfig} from 'baseai';

export const config: BaseAIConfig = ${JSON.stringify(We,null,2)};
`;try{let r=await xe(t);await ce.writeFile(e,r),b.log.success("Created `baseai.config.ts` with default configuration.")}catch(r){De({errorMessage:`Failed to create baseai.config.ts: ${r instanceof Error?r.message:String(r)}`,warningMessage:"Ensure you have permission to create files in the baseai directory."})}}}async function zp(){try{let e=ze.join(process.cwd(),"package.json"),o=await ce.readFile(e,"utf-8"),t=JSON.parse(o);t.scripts||(t.scripts={}),(!t.scripts.baseai||t.scripts.baseai!=="baseai")&&(t.scripts.baseai="baseai",await ce.writeFile(e,JSON.stringify(t,null,2)),b.log.success('Added "baseai" script in package.json'))}catch(e){De({errorMessage:`Failed to update package.json: ${e instanceof Error?e.message:String(e)}`,warningMessage:"Ensure you have permission to modify the package.json file."})}}function Xp({calledAsCommand:e}){e?(b.outro("All good. BaseAI setup completed successfully!"),b.log.warning(te(`Make sure to set environment variables like mentioned in the ${z(".env.baseai.example")} file added to your project root.`))):console.log()}async function xs({gitignoreEntry:e}){let o=ze.join(process.cwd(),".gitignore");try{let t="";try{t=await ce.readFile(o,"utf-8")}catch{await ce.writeFile(o,e);return}if(!t.includes(e)){let r=t.endsWith(`
`)?t+e:t+`
`+e;await ce.writeFile(o,r)}}catch(t){b.log.error(`Error updating .gitignore: ${t instanceof Error?t.message:String(t)}`)}}async function Yp(){let e=ze.join(process.cwd(),".env.baseai.example"),o=`# !! SERVER SIDE ONLY !!
# Keep all your API keys secret \u2014 use only on the server side.

# TODO: ADD: Both in your production and local env files.
# Langbase API key for your User or Org account.
# How to get this API key https://langbase.com/docs/api-reference/api-keys
LANGBASE_API_KEY=

# TODO: ADD: LOCAL ONLY. Add only to local env files.
# Following keys are needed for local pipe runs. For providers you are using.
# For Langbase, please add the key to your LLM keysets.
# Read more: Langbase LLM Keysets https://langbase.com/docs/features/keysets
OPENAI_API_KEY=
ANTHROPIC_API_KEY=
COHERE_API_KEY=
FIREWORKS_API_KEY=
GOOGLE_API_KEY=
GROQ_API_KEY=
MISTRAL_API_KEY=
PERPLEXITY_API_KEY=
TOGETHER_API_KEY=
XAI_API_KEY=
`;try{await Tt(e)||await ce.writeFile(e,o)}catch(t){b.log.error(`Error creating .env.baseai.example: Check the example env file here https://github.com/LangbaseInc/baseai/blob/main/.env.baseai.example
 Error: ${t instanceof Error?t.message:String(t)}`)}}async function It({calledAsCommand:e=!1,debug:o=!1}={}){let t=()=>{console.log(`
Interrupted. Cleaning up...`),process.exit(0)};process.on("SIGINT",t);try{await qp({calledAsCommand:e}),await Hp();let r=await Up(process.cwd());if(e&&b.log.info(`Detected package manager: ${r}`),!await ws()){let s=await b.confirm({message:"BaseAI is not installed but required to run. Would you like to install it?"});b.isCancel(s)&&(b.cancel("Operation cancelled."),process.exit(0)),s?await Jp(r):De({errorMessage:"BaseAI packages are required for setup.",warningMessage:"Run the setup again and allow installation of BaseAI packages to continue."})}await Kp(),await Vp(),await zp(),await xs({gitignoreEntry:`# baseai
**/.baseai/
`}),await xs({gitignoreEntry:`# env file
.env
`}),await Yp(),Xp({calledAsCommand:e})}catch(r){o&&console.error("Error:",r),b.cancel(`baseai init error ${r.message?r.message:r}`),process.exit(1)}finally{process.off("SIGINT",t)}}import*as k from"@clack/prompts";import Wp from"@sindresorhus/slugify";import Qp from"camelcase";import Zp from"figures";import $e from"fs";import Le from"path";import{fromZodError as el}from"zod-validation-error";import{exec as ol}from"child_process";import{promisify as tl}from"util";var rl=tl(ol),Ps={name:"ai-agent-memory",description:"My list of docs as memory for an AI agent pipe"},nl={documentsDir:"documents"};async function vs(){k.intro(h({text:"MEMORY",sub:"Create a new memory"}));let e=await k.group({name:()=>k.text({message:"Name of the memory",placeholder:Ps.name,validate:c=>{let d=no.safeParse(c);if(!d.success)return el(d.error).toString()}}),description:()=>k.text({message:"Description of the memory",placeholder:Ps.description}),useGitRepo:()=>k.confirm({message:"Do you want to create memory from current project git repository?",initialValue:!1})},{onCancel:()=>{k.cancel("Operation cancelled."),process.exit(0)}}),o=".",t=["*"];if(e.useGitRepo){try{await rl("git rev-parse --is-inside-work-tree")}catch{k.cancel("The current directory is not a Git repository."),process.exit(1)}o=await k.text({message:"Enter the path to the directory to track (relative to current directory):",initialValue:".",validate:d=>{if(!d.trim())return"The path cannot be empty.";let f=Le.resolve(process.cwd(),d);if(!$e.existsSync(f))return"The specified path does not exist.";if(!$e.lstatSync(f).isDirectory())return"The specified path is not a directory."}});let c=await k.text({message:"Enter file extensions to track (use * for all, or comma-separated list, e.g., .md,.mdx):",validate:d=>{if(d.trim()==="")return"Please enter at least one file extension or *";if(d!=="*"){let O=d.split(",").map(V=>V.trim()).filter(V=>!/^\.\w+$/.test(V));if(O.length>0)return`Invalid extension(s): ${O.join(", ")}. Extensions should start with a dot followed by alphanumeric characters.`}}});t=c==="*"?["*"]:c.split(",").map(d=>d.trim())}let r=Wp(e.name),n=Qp("memory-"+r),s=Le.join(process.cwd(),"baseai","memory"),i=Le.join(s,r),a=Le.join(i,"index.ts"),p=Le.join(i,nl.documentsDir),l=Le.join(process.cwd(),".baseai","db"),m=`import { MemoryI } from '@baseai/core';
import path from 'path';

const ${n} = (): MemoryI => ({
  name: '${r}',
  description: ${JSON.stringify(e.description)||""},
  config: {
		useGitRepo: ${e.useGitRepo},
		dirToTrack: path.posix.join(${o.split(Le.sep).map(c=>`'${c}'`).join(", ")}),
		extToTrack: ${JSON.stringify(t)}
  }
});

export default ${n};
`;try{if(await $e.promises.mkdir(s,{recursive:!0}),await $e.promises.mkdir(i,{recursive:!0}),await $e.promises.writeFile(a,m),await $e.promises.mkdir(l,{recursive:!0}),await nt(r),!e.useGitRepo)await $e.promises.mkdir(p,{recursive:!0}),k.note(`Add documents in baseai/memory/${r}/${z("documents")} to use them in the memory.`);else{let c=t.includes("*")?"all file types":`files with extensions: ${z(t.join(", "))}`;k.note(`All ${c} under ${z(o)} will be tracked and used in the memory.`)}k.outro(h({text:n,sub:`created as a new memory 
 ${be(Zp.pointer)} ${te(` ${a}`)}`,green:!0})),process.exit(0)}catch(c){k.cancel(`Error creating memory: ${c.message}`),process.exit(1)}}import*as X from"@clack/prompts";import Es from"picocolors";async function Ko({memoryName:e,overwrite:o,useLocalEmbeddings:t}){let r=X.spinner();try{X.intro(h({text:"EMBED",sub:`Creating embeddings of ${Es.cyan(e)}`})),e||(X.cancel("Memory name is required. Use --memory or -m flag to specify."),process.exit(1));let n=Do(e);await Ue(n),r.start("Processing memory docs...");let s=await we(n);s.length===0&&(X.cancel(`No valid documents found in memory '${n}'.`),process.exit(1));let i=await ao(n),a=[],p=[];if(i!=null&&i.useGitRepo){let{filesToDeploy:m,filesToDelete:c}=await Fo({memoryName:n,config:i});a=m,p=c,s=s.filter(d=>a.includes(d.name))}let l="Embeddings updated.";if(s&&s.length>0){r.message("Generating embeddings...");let m=i!=null&&i.useGitRepo?!0:o;l=await No({memoryFiles:s,memoryName:n,overwrite:m||!1,useLocalEmbeddings:t})}i!=null&&i.useGitRepo&&(p.length>0&&await sl({memoryName:n,filesToDelete:p}),await Ir(n),X.log.info("Updated embedded commit hash."),X.log.success("Synced memory files with git repository.")),r.stop(l)}catch(n){r.stop("Stopped!"),X.cancel(`FAILED: ${n.message}`),process.exit(1)}}async function sl({memoryName:e,filesToDelete:o}){let t=X.spinner();t.start("Detected files to delete. Deleting...");try{let r=await je(e);for(let n of o)r.data.documents[n]&&(await _o({db:r,docName:n}),X.log.info(`Deleted document: ${Es.cyan(n)}`));t.stop(`Documents deleted from memory ${e}.`)}catch(r){t.stop("Stopped!"),r instanceof Error?X.cancel(`Failed to delete documents: ${r.message}`):X.cancel("Failed to delete documents. An unknown error occurred."),process.exit(1)}}import*as Vo from"@clack/prompts";import Ss from"picocolors";async function Ms({memoryName:e,documentName:o,overwrite:t=!1}){Vo.intro(h({text:"EMBED DOC",sub:`Creating embeddings of Doc: ${Ss.cyan(o)} in memory ${Ss.cyan(e)}`}));let r=Vo.spinner();try{let{memoryFile:n,validMemoryName:s}=await jo({spinner:r,memoryName:e,documentName:o});r.message("Generating embeddings...");let i=await No({memoryFiles:[n],memoryName:s,overwrite:t||!1});r.stop(i)}catch(n){r.stop(`FAILED from here: ${n.message}`),process.exit(1)}}import il from"path";import As from"fs";async function Xe(){try{let e=il.join(process.cwd(),"baseai","memory");return As.existsSync(e)?await As.promises.readdir(e):[]}catch{return[]}}import*as zo from"@clack/prompts";async function Ts(){let e=await Xe();if(e.length===0){zo.log.message("No memory available.");return}zo.intro(h({text:"MEMORY",sub:"List of all available memory sets"})),console.log(""),e.forEach(o=>{console.log(`${ve.memory} ${o}`)}),process.exit(0)}import Xo from"picocolors";import*as H from"@clack/prompts";async function Is({memory:e,query:o}){var r;H.intro(h({text:"RETRIEVE",sub:"Retrieve similar chunks of a memory"}));let t=H.spinner();try{e||(H.log.error("Memory name is required. Use --memory or -m flag to specify."),process.exit(1)),o||(H.log.error("Query is required. Use --query, or -q flag to specify."),process.exit(1));let n=Do(e);await Ue(n),t.start("Processing memory data...");let s=await ko([e]);if(s.length===0)return H.log.error("Please make sure the memory has one or more documents and they are embedded.");t.message("Generating embeddings...");let a=((r=(await oe()).memory)==null?void 0:r.useLocalEmbeddings)||!1,p=[];a?(u("Generating local embeddings"),p=await Be([o])):(u("Generating OpenAI embeddings"),p=await qe([o])),t.message("Searching for similar chunks...");let l=Ro({chunks:s,queryEmbedding:p[0].embedding,topK:x.MAX_CHUNKS_ATTACHED_TO_LLM});if(l.length===0)return H.log.message("No similar chunks found.");H.log.info("Similar Chunks:"),l.forEach((m,c)=>{let d=Xo.cyan(Xo.bold(`#${c+1}`)),f=`Similarity: ${Xo.green(m.similarity.toFixed(6))}`,O=`Source: ${m.attributes.docName}`,V=m.text;H.note(`${d}
${f}
${O}`),H.log.message(`${Xo.cyan("Text Chunk:")}
${V}
`)}),H.outro("Memory retrieval completed successfully.")}catch(n){H.cancel(`FAILED: ${n.message}`)}finally{t.stop("Finished")}}import*as F from"@clack/prompts";import al from"@sindresorhus/slugify";import Yo from"camelcase";import pl from"figures";import _s from"fs";import ks from"path";import{z as ll}from"zod";var ml=ll.string().min(3,"Pipe name must be at least 3 characters long").max(50,"Pipe name must not exceed 50 characters").regex(/^[a-zA-Z0-9.-]+$/,"Pipe name can only contain letters, numbers, dots, and hyphens"),Rs=`${te("(optional)")} 
${te(`${Ft} Press ${z("space")} to select, ${z("enter")} to submit or skip`)}`;async function Os(){let e=await Ne(),o=await Xe(),t=e.length>0,r=o.length>0;F.intro(h({text:"PIPE",sub:"Create a new agent pipe"}));let n=await F.group({name:()=>F.text({message:"Name of the pipe",placeholder:"ai-agent-pipe",validate:P=>{let ae=ml.safeParse(P);if(!ae.success)return ae.error.issues[0].message}}),description:()=>F.text({message:"Description of the pipe",placeholder:"This is a test pipe"}),status:()=>F.select({message:"Status of the pipe",options:[{value:"public",label:"Public"},{value:"private",label:"Private"}]}),systemPrompt:()=>F.text({message:"System prompt",placeholder:"You are a helpful AI assistant.",initialValue:"You are a helpful AI assistant."}),...r&&{memory:async()=>F.multiselect({message:`Select memory for this pipe ${Rs}`,options:o.map(P=>({value:P,label:P})),required:!1})},...t&&{tools:async()=>F.multiselect({message:`Select tools for this pipe ${Rs}`,options:e.map(P=>({value:P,label:P})),required:!1})}},{onCancel:()=>{F.cancel("Operation cancelled."),process.exit(0)}}),s="",i=[],a=n.tools;a&&a.map(P=>{let ae=`${Yo(P)}Tool`;i.push(`${ae}()`),s+=`
import ${ae} from '../tools/${P}';`});let p="",l=[],m=n.memory;m&&m.map(P=>{let ae=`${Yo(P)}Memory`;l.push(`${Yo(P)}Memory()`),p+=`
import ${ae} from '../memory/${P}';`});let c=l.length>0,d=al(n.name),f=Yo("pipe-"+n.name),O=`import { PipeI } from '@baseai/core';${s}${p}

const ${f} = (): PipeI => ({
    // Replace with your API key https://langbase.com/docs/api-reference/api-keys
	apiKey: process.env.LANGBASE_API_KEY!,
    name: '${d}',
    description: ${JSON.stringify(n.description)||""},
    status: '${n.status}',
    model: 'openai:gpt-4o-mini',
    stream: true,
    json: false,
    store: true,
    moderate: true,
    top_p: 1,
    max_tokens: 1000,
    temperature: 0.7,
    presence_penalty: 1,
    frequency_penalty: 1,
    stop: [],
    tool_choice: 'auto',
    parallel_tool_calls: true,
    messages: [
        { role: 'system', content: \`${n.systemPrompt}\` },
        ${c?`{ role: 'system', name: 'rag', content: "${to.replace(/\n/g,"\\n")}" }`:""}
    ],
    variables: [],
    memory: [${l.join(", ")}],
    tools: [${i.join(", ")}],
});

export default ${f};
    `,V=await xe(O),Pe=ks.join(process.cwd(),"baseai","pipes"),Ye=ks.join(Pe,`${d}.ts`);try{await _s.promises.mkdir(Pe,{recursive:!0}),await _s.promises.writeFile(Ye,V),F.outro(h({text:f,sub:`created as a new pipe 
 ${be(pl.pointer)} ${te(` ${Ye}`)}`,green:!0})),process.exit(0)}catch(P){F.cancel(`Error creating pipe: ${P.message}`),process.exit(1)}}import*as ie from"@clack/prompts";import cl from"@sindresorhus/slugify";import Ds from"camelcase";import dl from"figures";import $s from"fs";import Ls from"path";import ul from"picocolors";import{z as fl}from"zod";var Ns={type:"function",function:{name:"get_current_weather",description:"Get the current weather in a given location",parameters:{type:"object",properties:{location:{type:"string",description:"The city and state, e.g. San Francisco, CA"},unit:{type:"string",enum:["celsius","fahrenheit"]}},required:["location"]}}},gl=fl.string().min(3,"Tool name must be at least 3 characters long").max(50,"Tool name must not exceed 50 characters");async function Fs(){let e=await Ne();ie.intro(h({text:"TOOL",sub:"Create a new tool"}));let o=await ie.group({name:()=>ie.text({message:"Name of the tool",placeholder:Ns.function.name,validate:m=>{let c=gl.safeParse(m);if(!c.success)return c.error.issues[0].message;if(wo({name:m,allTools:e}))return`Tool with name ${m} already exists!`}}),description:()=>ie.text({message:"Description of the tool",placeholder:Ns.function.description,validate(m){if(m.length===0)return"Tool description is required!"}})},{onCancel:()=>{ie.cancel("Operation cancelled."),process.exit(0)}}),t=cl(o.name),r=Ds("tool-"+o.name),n=Ds(o.name),s=o.description||"",i=`import { ToolI } from '@baseai/core';

export async function ${n}() {
	// Add your tool logic here
	// This function will be called when the tool is executed
}

const ${r} = (): ToolI => ({
	run: ${n},
	type: 'function' as const,
	function: {
		name: '${r}',
		description: ${JSON.stringify(s)||""},
		parameters: {},
	},
});

export default ${r};
`,a=Ls.join(process.cwd(),"baseai","tools"),p=Ls.join(a,`${t}.ts`),l=await xe(i);try{await $s.promises.mkdir(a,{recursive:!0}),await $s.promises.writeFile(p,l),ie.outro(h({text:r,sub:`created as a new tool 
 ${ul.dim(`${dl.pointer} ${p}`)}`,green:!0})),process.exit(0)}catch(m){ie.cancel(`Error creating tool: ${m.message}`),process.exit(1)}}import hl from"cli-meow-help";import yl from"meow";var js={clear:{type:"boolean",default:!1,desc:"Clear the console"},debug:{type:"boolean",default:!1,shortFlag:"d",desc:"Print debug info"},memory:{type:"string",shortFlag:"m",desc:"Memory to use"},overwrite:{type:"boolean",shortFlag:"o",desc:"Overwrite existing memory embeddings"},document:{type:"string",shortFlag:"d",desc:"Document to embed"},query:{type:"string",shortFlag:"q",desc:"Query string"},list:{type:"boolean",shortFlag:"l",desc:"List available memory"},local:{type:"boolean",shortFlag:"L",desc:"Set use local embeddings (true/false)"}},Cl={dev:{desc:"Run BaseAI in dev mode"},auth:{desc:"Authenticate with Langbase"},add:{desc:"Add an agent Pipe from Langbase"},deploy:{desc:"Deploy BaseAI to Langbase"},pipe:{desc:"Create a pipe"},tool:{desc:"Create a tool"},memory:{desc:"Create a memory"},embed:{desc:"Create embeddings of a memory"},retrieve:{desc:"Retrieve similar chunks of a memory"},config:{desc:"Configure BaseAI",subcommands:{embeddings:{desc:"Enable or disable local embeddings"}}},build:{desc:"Build BaseAI files"},init:{desc:"Set up BaseAI files and add packages"},help:{desc:"Print help info"}},bl=hl({name:"baseai",flags:js,commands:Cl,desc:!1,header:!1,footer:"Made by Langbase. For more https://langbase.com/docs"}),xl={importMeta:import.meta,inferType:!0,description:!1,hardRejection:!1,flags:js},_t=yl(bl,xl);import*as ho from"@clack/prompts";import Gs from"fs/promises";import Bs from"path";var wl=Bs.join(process.cwd(),"baseai"),kt=Bs.join(wl,"baseai.config.ts");async function qs(e){try{ho.intro(h({text:"CONFIG",sub:"Configure embeddings"}));let o=await Gs.readFile(kt,"utf-8"),t=o.match(/(["']?useLocalEmbeddings["']?\s*:\s*)(true|false)/);if(!t)return console.log("useLocalEmbeddings not found in the config file."),null;let r=t[2]==="true",n=o.replace(/(["']?useLocalEmbeddings["']?\s*:\s*)(true|false)/,`$1${e}`);if(await Gs.writeFile(kt,n.trim()),e===r){console.log(`
useLocalEmbeddings is already set to ${e}.
`);return}console.log(`
Updated useLocalEmbeddings to ${e} successfully in ${kt}`);let i=r===!0?"local Ollama":"OpenAI",a=e===!0?"local Ollama":"OpenAI";ho.log.info(`
Switching from ${i} embeddings to ${a} embeddings.
`);let p=await Xe();for(let l of p)await Ko({memoryName:l,overwrite:!0,useLocalEmbeddings:e});ho.log.info("Please restart the dev server to apply the changes to the memory embeddings configuration.")}catch(o){console.error(`Error updating useLocalEmbeddings: ${o.message}`)}}import*as yo from"@clack/prompts";function Rt(e){yo.intro(h({text:"DEBUG MODE",sub:"logs will be verbose...",dim:!0})),console.log(),yo.intro(h({text:"cwd",dim:!0})),console.log(process.cwd()),console.log(),yo.intro(h({text:"cli.flags",dim:!0})),console.log(e.flags),console.log(),yo.intro(h({text:"cli.input",sub:"commands",dim:!0})),console.log(e.input),console.log()}import Pl from"cli-handle-unhandled";import vl from"cli-welcome";import Hs from"path";import{fileURLToPath as El}from"url";import Us from"fs";var Js=async({clear:e=!1})=>{Pl();let o=El(import.meta.url),t=Hs.dirname(o),r=Hs.join(t,"..","package.json");Us.existsSync(r)||(console.error("Unable to find package.json"),process.exit(1));let n=JSON.parse(Us.readFileSync(r,"utf8"));await vl({title:"baseai",tagLine:"by Langbase",description:n.description,version:n.version,bgColor:"#A699EA",color:"#000000",bold:!0,clear:e})};var{flags:K,input:Ks,showHelp:Al}=_t,{clear:Tl,debug:Co}=K,A=e=>Ks.includes(e),de=e=>!!K[e];(async()=>{await Js({clear:Tl}),Co&&Rt(_t),Co&&console.log("Checking if baseai is initialized"),A("init")?await It({calledAsCommand:!0,debug:Co}):await It({calledAsCommand:!1,debug:Co});let e=await oe();if(Sl.config({path:Ml.resolve(process.cwd(),e.envFilePath)}),Co&&console.log("Initializing logger"),await lr(),A("help")&&Al(0),A("auth")&&await Nt(),A("dev")&&await Cs(),A("pipe")&&await Os(),A("tool")&&await Fs(),A("build")&&await So({calledAsCommand:!0}),A("deploy")&&!de("memory")&&!de("document")&&await Dr({overwrite:K.overwrite}),A("deploy")&&de("memory")&&!de("document")&&await jr({memoryName:K.memory,overwrite:K.overwrite}),A("deploy")&&de("memory")&&de("document")&&await Rr({memoryName:K.memory,documentName:K.document,overwrite:K.overwrite}),A("memory")&&de("list")&&await Ts(),A("memory")&&!de("list")&&await vs(),A("embed")&&de("document")&&de("memory")&&await Ms({memoryName:K.memory,documentName:K.document,overwrite:K.overwrite}),A("embed")&&!de("document")&&await Ko({memoryName:K.memory,overwrite:K.overwrite}),A("retrieve")&&await Is({memory:K.memory,query:K.query}),A("config")&&A("embeddings")&&await qs(K.local),A("add")||A("a")||A("clone")||A("install")||A("i")){let[o,t]=Ks;await Ut({loginAndPipe:t})}})();
//# sourceMappingURL=index.js.map